{
  "hash": "6c86c599ff773497e62382163e384eb4",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 6: Visualising and Analysing Time-oriented Data\"\nauthor: \"Vanessa Heng\"\ndate: \"February 16, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\neditor: visual\n---\n\n\n# 1 Overview\n\n![](images/clipboard-2248555931.png)In this exercise, we are going to create the following data visualisation by using R packages:\n\n-   plotting a calendar heatmap by using ggplot2 functions\n\n-   plotting a cycle plot by using ggplot2 function\n\n-   plotting a slope graph\n\n# 2 Getting Started\n\n## 2.1 Installing and loading the packages\n\nFor this exercise, the following R packages will be used.\n\n-   [**CGPfunctions**](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3) package is used to plot slope graphs using [`newggslopegraph`](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html)`()` .\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(scales, viridis, lubridate, ggthemes, \n               gridExtra, readxl, knitr, data.table, \n               CGPfunctions, ggHoriPlot, tidyverse)\n```\n:::\n\n\n## 2.2 Data import\n\nIn this hands-on exercise, 3 files are used.\n\n*eventlog.csv* file will be used to create calendar heat maps. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n*arrivals_by_air.xlsx* will be used to create cycle plots. This data file consists of 240 rows of arrival information by country.\n\n*rice.xlsx* will be used to create slope graphs. This data file consists of 550 rows of rice yield and production by year in China.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks <- read_csv(\"data/eventlog.csv\")\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\nrice <- read_csv(\"data/rice.csv\")\n```\n:::\n\n\n## 2.3 Examine the data\n\nExamining the imported data frame before further analysis is always a good practice.\n\nFor example, `kable()` can be used to review the structure of the imported data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n|timestamp           |source_country |tz              |\n|:-------------------|:--------------|:---------------|\n|2015-03-12 15:59:16 |CN             |Asia/Shanghai   |\n|2015-03-12 16:00:48 |FR             |Europe/Paris    |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai   |\n|2015-03-12 16:02:38 |US             |America/Chicago |\n|2015-03-12 16:03:22 |CN             |Asia/Shanghai   |\n|2015-03-12 16:03:45 |CN             |Asia/Shanghai   |\n:::\n\n```{.r .cell-code}\nkable(head(air))\n```\n\n::: {.cell-output-display}\n|Month-Year | Republic of South Africa| Canada|   USA| Bangladesh| Brunei| China| Hong Kong SAR (China)| India| Indonesia| Japan| South Korea| Kuwait| Malaysia| Myanmar| Pakistan| Philippines| Saudi Arabia| Sri Lanka| Taiwan| Thailand| United Arab Emirates| Vietnam| Belgium & Luxembourg|  CIS| Finland| France| Germany| Ireland| Italy| Netherlands| Spain| Switzerland| United Kingdom| Australia| New Zealand|\n|:----------|------------------------:|------:|-----:|----------:|------:|-----:|---------------------:|-----:|---------:|-----:|-----------:|------:|--------:|-------:|--------:|-----------:|------------:|---------:|------:|--------:|--------------------:|-------:|--------------------:|----:|-------:|------:|-------:|-------:|-----:|-----------:|-----:|-----------:|--------------:|---------:|-----------:|\n|2000-01-01 |                     3291|   5545| 25906|       2883|   3749| 33895|                 13692| 19235|     65151| 59288|       21457|    507|    27472|    1177|     2150|        8404|         1312|      3922|  15766|    12048|                 1318|    1527|                 1434| 2703|    1634|   4752|   12739|    1292|  3544|        4962|   925|        3731|          28986|     34616|        5034|\n|2000-02-01 |                     2357|   6120| 28262|       2469|   3236| 34344|                 19870| 18975|     37105| 58188|       19634|    199|    29084|    1161|     2496|        9128|          623|      3988|  24861|    12745|                  899|    2269|                 1596| 1182|    1297|   6391|   13093|    1200|  2897|        5054|   747|        3980|          35148|     26030|        3938|\n|2000-03-01 |                     4036|   6255| 30439|       2904|   3342| 27053|                 17086| 21049|     44205| 74426|       20719|    386|    30504|    1355|     2429|       11691|         1578|      4259|  18767|    16971|                 1474|    2034|                 1548| 1088|    1220|   5528|   13645|    1368|  2717|        4950|   935|        3576|          36117|     31119|        4668|\n|2000-04-01 |                     4241|   4521| 25378|       2843|   5117| 30464|                 22346| 26160|     45480| 49985|       17489|    221|    34478|    1593|     2711|       14141|          705|      6579|  22735|    20397|                 1284|    2420|                 1592| 1012|    1208|   5544|   13366|    1345|  2512|        4149|   941|        3850|          33792|     34824|        6890|\n|2000-05-01 |                     2841|   3914| 26163|       2793|   4152| 30775|                 16357| 35869|     38350| 48937|       19398|    164|    34795|    1397|     2594|       13305|          679|      4625|  18399|    15769|                 1042|    1833|                 1167|  660|     743|   4225|   10878|    1067|  2205|        3643|   764|        3025|          23377|     33139|        7006|\n|2000-06-01 |                     2776|   3487| 28179|       3146|   5018| 26720|                 18133| 31314|     47982| 53798|       17522|    440|    34660|    1715|     2924|       10555|         2749|      4740|  21042|    17217|                 1545|    2480|                 1170|  712|     982|   4047|    9054|    1363|  2196|        3544|   855|        2580|          21769|     35731|        7634|\n:::\n\n```{.r .cell-code}\nkable(head(rice))\n```\n\n::: {.cell-output-display}\n|Country | Year| Yield| Production|\n|:-------|----:|-----:|----------:|\n|China   | 1961| 20787|   56217601|\n|China   | 1962| 23700|   65675288|\n|China   | 1963| 26833|   76439280|\n|China   | 1964| 28289|   85853780|\n|China   | 1965| 29667|   90705630|\n|China   | 1966| 31445|   98403990|\n:::\n:::\n\n\nThere are three columns in attacks table, namely *timestamp*, *source_country* and *tz*.\n\n-   *timestamp* field stores date-time values in POSIXct format.\n\n-   *source_country* field stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.\n\n-   *tz* field stores the time zone of the source IP address.\n\n# 3 Calendar Heatmaps\n\n## 3.1 Single Calendar Heatmap\n\nLet's build a single calendar heatmap.\n\nBefore we can plot the calendar heatmap, we need to prepare the data and create two customised fields.\n\n::: panel-tabset\n## Step 1\n\nStep 1: Deriving customised fields\n\nWe write a function to derive two new fields namely *`wkday`* and *`hour`* need to be derived.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_hr_wkday <- function(ts, sc, tz) {   \n  real_times <- ymd_hms(ts, tz = tz[1], quiet = TRUE)   \n  dt <- data.table(source_country = sc, \n                   wkday = weekdays(real_times),                    \n                   hour = hour(real_times))   \n  return(dt)   \n  }\n```\n:::\n\n\n## Step 2\n\nStep 2: Deriving the attacks tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(wkday, levels = wkday_levels),\n        hour  = factor(hour, levels = 0:23))\n\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n|tz           |source_country |wkday    |hour |\n|:------------|:--------------|:--------|:----|\n|Africa/Cairo |BG             |Saturday |20   |\n|Africa/Cairo |TW             |Sunday   |6    |\n|Africa/Cairo |TW             |Sunday   |8    |\n|Africa/Cairo |CN             |Sunday   |11   |\n|Africa/Cairo |US             |Sunday   |15   |\n|Africa/Cairo |CA             |Monday   |11   |\n:::\n:::\n\n\n## Final Product\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, aes(hour, wkday, fill = n)) + \n    geom_tile(color = \"white\", size = 0.1) + \n    theme_minimal() + \n    coord_equal() +\n    scale_fill_gradient(name = \"# of attacks\",\n                        low = \"sky blue\", \n                        high = \"dark blue\") +\n    labs(x = NULL, \n         y = NULL, \n         title = \"Attacks by weekday and time of day\") +\n    theme(axis.ticks = element_blank(),\n          plot.title = element_text(hjust = 0.5),\n          legend.title = element_text(size = 8),\n          legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n:::\n\n::: callout-note\n## Things to learn\n\n-   A tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\n\n-   A new field called n is derived by using `group_by()` and `count()` functions.\n\n-   na.omit() is used to exclude missing values.\n\n-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size` arguments are used to specify the border colour and line size of the tiles.\n\n-   `theme_tufte()` of `ggthemes` package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\n\n-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.\n\n-   `scale_fill_gradient()` function is used to create a two-colour gradient (low-high).\n:::\n\n## 3.2 Multiple Calendar Heatmaps\n\nLet's build multiple heatmaps for the top four countries with the highest number of attacks.\n\nSimilarly, we need to prepare the data before we can build the multiple heatmaps.\n\n::: panel-tabset\n## Step 1\n\nStep 1: Deriving attack by country object\n\nTo identify the top 4 countries with the highest number of attacks, we need the following:\n\n-   count the number of attacks by country,\n\n-   calculate the percentage of attacks by country, and\n\n-   save the results in a tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n```\n:::\n\n\n## Step 2\n\nStep 2: Preparing the tidy data frame\n\nLet's extract the attack records of the top 4 countries from the attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n```\n:::\n\n\n## Final Product\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_minimal() + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n:::\n\n# 4 Cycle Plots\n\nIn this section, we will learn how to plot a cycle plot showing the time-series patterns and trends of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n::: panel-tabset\n## Step 1\n\nStep 1: Deriving the time-related fields\n\nTwo new fields called month and year are derived from Month-Year field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n```\n:::\n\n\n## Step 2\n\nStep 2: Extract target country\n\nLet's extract data for the target country, i.e. Vietnam, from year 2010.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n```\n:::\n\n\n## Step 3\n\nStep 3: Calculate average arrivals by month\n\n`group_by()` and `summarise()` of dplyr to compute year average arrivals by month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n```\n:::\n\n\n## Final Product\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\", \n       x = NULL,\n       y = \"No. of Visitors\") +\n  theme_minimal() + \n  theme(axis.text.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n:::\n\n# 5 Slope Graphs\n\nIn this section, we will learn how to plot a [slopegraph](#0) by using R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>% \n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"SMU-VAA module\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}