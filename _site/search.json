[
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "title": "Take-home Exercise 4: Prototyping Modules for Shiny Application",
    "section": "",
    "text": "pacman::p_load(tidyverse, plotly, ggplot2, forecast, zoo)\n\n\nweather_list &lt;- list.files(path = \"data\",    \n                           recursive = TRUE,    \n                           pattern = \"\\\\.csv$\",\n                           full.names = TRUE)  \nweather &lt;- read_csv(weather_list)\n\n\nweather &lt;- weather %&gt;% \n          select(1:13, \"DailyRainfall\" = 5, \"HighestRainfall30\" = 6,\n                 \"HighestRainfall60\" = 7, \"HighestRainfall120\" = 8,\n                 \"MeanTemp\" = 9, \"MaxTemp\" = 10, \"MinTemp\" = 11,\n                 \"MeanWindSpeed\" = 12, \"MaxWindSpeed\" = 13)\nweather$Year &lt;- as.integer(weather$Year)\nweather$Month &lt;- month.abb[weather$Month]\nweather$Day &lt;- as.integer(weather$Day)\nweather$DailyRainfall &lt;- as.numeric(weather$DailyRainfall)\nweather$HighestRainfall30 &lt;- as.numeric(weather$HighestRainfall30)\nweather$HighestRainfall60 &lt;- as.numeric(weather$HighestRainfall60)\nweather$HighestRainfall120 &lt;- as.numeric(weather$HighestRainfall120)\nweather$MeanTemp &lt;- as.numeric(weather$MeanTemp)\nweather$MaxTemp &lt;- as.numeric(weather$MaxTemp)\nweather$MinTemp &lt;- as.numeric(weather$MinTemp)\nweather$MeanWindSpeed &lt;- as.numeric(weather$MeanWindSpeed)\nweather$MaxWindSpeed &lt;- as.numeric(weather$MaxWindSpeed)\n\nglimpse(weather)\n\nRows: 168,836\nColumns: 13\n$ Station            &lt;chr&gt; \"Admiralty\", \"Admiralty\", \"Admiralty\", \"Admiralty\",…\n$ Year               &lt;int&gt; 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 200…\n$ Month              &lt;chr&gt; \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"Jan\", \"J…\n$ Day                &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, …\n$ DailyRainfall      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ HighestRainfall30  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ HighestRainfall60  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ HighestRainfall120 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ MeanTemp           &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ MaxTemp            &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ MinTemp            &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ MeanWindSpeed      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ MaxWindSpeed       &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n\n\n\nweather$DDate &lt;- as.Date(paste(weather$Year, \n                               weather$Month,\n                               weather$Day, sep = \"-\"), format = \"%Y-%b-%d\")\n\nTemp_YM &lt;- weather %&gt;% \n  group_by(Year, Month) %&gt;% \n  summarise(AveMeanTemp = mean(MeanTemp, na.rm = TRUE),\n            MaxMaxTemp = max(MaxTemp, na.rm = TRUE),\n            MinMinTemp = min(MinTemp, na.rm = TRUE)) %&gt;% \n  ungroup()\nTemp_YM &lt;- Temp_YM[!is.na(Temp_YM$AveMeanTemp), ]\n\nTemp_Station_YM &lt;- weather %&gt;% \n  group_by(Station, Year, Month) %&gt;% \n  summarise(AveMeanTemp = mean(MeanTemp, na.rm = TRUE),\n            MaxMaxTemp = max(MaxTemp, na.rm = TRUE),\n            MinMinTemp = min(MinTemp, na.rm = TRUE)) %&gt;% \n  ungroup()\nTemp_Station_YM &lt;- Temp_Station_YM[!is.na(Temp_Station_YM$AveMeanTemp), ]\n\n\ntest &lt;- Temp_Station_YM %&gt;% \n  group_by(Year, Month) %&gt;% \n    summarise(MeanT = mean(AveMeanTemp, na.rm = TRUE),\n            MaxT = max(MaxMaxTemp, na.rm = TRUE),\n            MinT = min(MinMinTemp, na.rm = TRUE)) %&gt;% \n  ungroup()\n\n\nts_data &lt;- ts(Temp_YM$AveMeanTemp, \n              start = c(1982, 1), end = c(2023, 12), frequency = 12)  \nmodel &lt;- auto.arima(ts_data)\nforecast_values &lt;- forecast(model, h = 120)\n\n\nplot_ly() %&gt;%\n  add_lines(x = time(ts_data), y = ts_data, name = \"Observed\",\n            text = paste(\n                    format(as.yearmon(time(ts_data)), \"%Y-%b\"), \n                    \"&lt;br&gt;Mean Temp: \", \n                    round(ts_data, 2)), hoverinfo = \"text\") %&gt;%\n  add_lines(\n    x = time(forecast_values$mean),\n    y = forecast_values$mean,\n    name = \"Forecast\",\n    text = paste(\n      format(as.yearmon(time(forecast_values$mean)), \"%Y-%b\"), \n      \"&lt;br&gt;Mean Temp: \", \n      round(forecast_values$mean, 2)\n    ),\n    hoverinfo = \"text\"\n  ) %&gt;%\n  layout(title = \"Mean Temperature Forecast\",\n         xaxis = list(title = \"Date\"),\n         yaxis = list(title = \"Mean Temperature\")) \n\n\n\n\n\n\ngg &lt;- ggplot(Temp_YM, \n       aes(x = factor(Month, levels = month.abb), y = AveMeanTemp, \n           group = Year, color = factor(Year))) +\n    geom_point(aes(color = factor(Year),\n                   text = paste(Year, \"-\", Month,\n                                \"&lt;br&gt;MeanTemp:\", round(AveMeanTemp, 2), \"ºC\"))) +\n    geom_line() +\n    labs(x = \"Month\", \n       y = \"Mean Temperatures (°C)\", \n       title = \"Mean Temperatures variation throughout the year\",\n       subtitle = \"Hotter days from mid May 2023 as compared to years 1983, 1993, 2003 and 2013\",\n       caption = \"Data from Meteorological Service Singapore website\") +\n  scale_color_discrete(name = \"Year\") +\n  theme_minimal() + \n  theme(plot.title = element_text(face = \"bold\"))\n\nggplotly(gg, tooltip = \"text\") %&gt;%\n    layout(title = list(text = \n                        paste0(gg$labels$title, \"&lt;br&gt;\", \"&lt;sup&gt;\", \n                               gg$labels$subtitle, \"&lt;/sup&gt;\"),\n                        font = list(weight = \"bold\")))\n\n\n\n\n\n\nets_model &lt;- ets(ts_data)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to my 10-week ISSS608 Visual Analytics and Applications journey.\nOn this website, you will find my coursework prepared for this course.\nThe road is tough but the following quote motivates me!\n“Everybody, try laughing. Then whatever scares you will go away!” - Tatsuo Kusakabe"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data",
    "section": "",
    "text": "In this exercise, we will learn how to model, analyse and visualise network data using R:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor this exercise, 4 network data modeling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Besides these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangle time data will be installed and launched too.\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#data-import",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nThe data sets used is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\nglimpse(GAStech_nodes)\n\nRows: 54\nColumns: 4\n$ id         &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 44, 45, 46, 8, 9, 10, 11, 12, 13, 14, …\n$ label      &lt;chr&gt; \"Mat.Bramar\", \"Anda.Ribera\", \"Rachel.Pantanal\", \"Linda.Lago…\n$ Department &lt;chr&gt; \"Administration\", \"Administration\", \"Administration\", \"Admi…\n$ Title      &lt;chr&gt; \"Assistant to CEO\", \"Assistant to CFO\", \"Assistant to CIO\",…\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#wrangling-time",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#wrangling-time",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data",
    "section": "2.3 Wrangling time",
    "text": "2.3 Wrangling time\nFrom the above, we can notice that SentDate should not be in character type. The code chunk below will be used to perform the changes.\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if the label is TRUE. The argument abbr is FALSE keep the day spells in full, i.e. Monday. The function will create a new column in the dataframe i.e. Weekday and the output of wday() will be saved in this newly created field. The values in the Weekday field are in ordinal scale."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#wrangling-attributes",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#wrangling-attributes",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data",
    "section": "2.4 Wrangling attributes",
    "text": "2.4 Wrangling attributes\nA close examination of GAStech_edges dataframe reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\nWe only filter by work-related in the mainSubject and count the number of rows in each group.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#the-tbl_graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#the-tbl_graph-object",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data",
    "section": "3.1 The tbl_graph object",
    "text": "3.1 The tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame\ndata.frame, list, matrix from base\nigraph from igraph\nnetwork from network\ndendrogram and hclust from stats\nNode from data.tree\nphylo and evonet from ape\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#the-dplyr-verbs",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#the-dplyr-verbs",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data",
    "section": "3.2 The dplyr verbs",
    "text": "3.2 The dplyr verbs\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#using-tbl_graph-to-build-tidygraph-data-model",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#using-tbl_graph-to-build-tidygraph-data-model",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data",
    "section": "3.3 Using tbl_graph() to build tidygraph data model",
    "text": "3.3 Using tbl_graph() to build tidygraph data model\nIn this section, you will use tbl_graph() of tidygraph package to build a tidygraph’s network graph dataframe.\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nGAStech_graph is a tbl_graph object with 54 nodes and 1372 edges.\nThe command prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#changing-the-active-object",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#changing-the-active-object",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data",
    "section": "3.4 Changing the active object",
    "text": "3.4 Changing the active object\nThe nodes tibble data frame is activated by default, but we can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#computing-centrality-indices",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#computing-centrality-indices",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data",
    "section": "6.1 Computing centrality indices",
    "text": "6.1 Computing centrality indices\nCentrality measures are a collection of statistical indices used to describe the relative importance of the actors are in a network. There are four well-known centrality measures, namely: degree, betweenness, closeness, and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measures here.\n\n\nShow the code\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe algorithm used is the centrality_betweenness() of tidygraph."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-network-metrics",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-network-metrics",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data",
    "section": "6.2 Visualising network metrics",
    "text": "6.2 Visualising network metrics\nIt is important to note that from ggraph v2.0 onwards, tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph to use them in a plot.\n\n\nShow the code\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-community",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-community",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data",
    "section": "6.3 Visualising Community",
    "text": "6.3 Visualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it.\nIn the code chunk below group_edge_betweenness() is used.\n\n\nShow the code\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(\n    group_edge_betweenness(weights = Weight, directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\ng + theme_graph()"
  }
]