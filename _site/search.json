[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to my 10-week ISSS608 Visual Analytics and Applications journey.\nOn this website, you will find my coursework prepared for this course.\nThe road is tough but the following quote motivates me!\n“Everybody, try laughing. Then whatever scares you will go away!” - Tatsuo Kusakabe"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index.\nParallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, a parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nThis exercise aims to plot static and interactive parallel coordinates plots for visualising and analysing multivariate, numerical data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor this exercise, the following R packages will be used.\n\nGGally, extends ggplot2 by adding several functions to reduce the complexity of combining geometric objects with transformed data.\nparcoords, package allow users the very well designed and interactive parallel-coordinates chart for d3 with the infrastructure, flexibility, and robustness of htmlwidgets.\nparallelPlot is used to construct a parallel coordinate plot for a data set with classes in last column.\n\n\npacman::p_load(GGally, parallelPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#data-import",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nThe data of World Happines 2018 report will be used. The data set is downloaded from here.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "",
    "text": "The correlation coefficient is a popular statistic that is used to measure the type and strength of the relationship between two variables. The values of a correlation coefficient range between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficients of the pair comparisons are displayed in a table form known as a correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression, a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram is used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitates perception.\n\nThis exercise aim to plot data visualisation for visualising correlation matrix with R, by creating a correlation matrix using pairs() , plot a corrgram using corrplot and create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor this exercise, the following R packages will be used.\n\ncorrplot, an R package which provides a visual exploratory tool on correlation matrix that supports automatic variable reordering to help detect hidden patterns among variables.\n\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#data-import",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nThe Wine Quality Data Set of UCI Machine Learning Repository is used which consists of 13 variables and 6497 observations.\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "This exercise aims to gain hands-on experience in plotting funnel plots which are specially designed data visualisations for conducting unbiased comparison between outlets, stores or business entities by\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science processes,\nplotly for creating interactive plot\nFunnelPlotR for creating funnel plot.\nknitr for building static html table.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#data-import",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\ncovid19 \n\n# A tibble: 267 × 7\n   `Sub-district ID` City       District `Sub-district` Positive Recovered Death\n               &lt;dbl&gt; &lt;fct&gt;      &lt;fct&gt;    &lt;fct&gt;             &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1        3172051003 JAKARTA U… PADEMAN… ANCOL              1776      1691    26\n 2        3173041007 JAKARTA B… TAMBORA  ANGKE              1783      1720    29\n 3        3175041005 JAKARTA T… KRAMAT … BALE KAMBANG       2049      1964    31\n 4        3175031003 JAKARTA T… JATINEG… BALI MESTER         827       797    13\n 5        3175101006 JAKARTA T… CIPAYUNG BAMBU APUS         2866      2792    27\n 6        3174031002 JAKARTA S… MAMPANG… BANGKA             1828      1757    26\n 7        3175051002 JAKARTA T… PASAR R… BARU               2541      2433    37\n 8        3175041004 JAKARTA T… KRAMAT … BATU AMPAR         3608      3445    68\n 9        3171071002 JAKARTA P… TANAH A… BENDUNGAN HIL…     2012      1937    38\n10        3175031002 JAKARTA T… JATINEG… BIDARA CINA        2900      2773    52\n# ℹ 257 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#fair-visual-comparisons-using-funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#fair-visual-comparisons-using-funnelplotr-methods",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "3.1 Fair Visual Comparisons using FunnelPlotR methods",
    "text": "3.1 Fair Visual Comparisons using FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\nBasicMakeover 1Makeover 2\n\n\nThe following basic plot shows a funnel plot object with 267 points of which 0 are outliers. Plot is adjusted for over-dispersion.\n\n\nShow the code\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`)\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nNote\n\n\n\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR” (indirectly standardised ratios). Other options: “PR” for proportions, or “RC” for ratios of counts.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\nThe following funnel plot object has 267 points of which 7 are outliers. Plot is adjusted for over-dispersion.\n\n\nShow the code\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     \n  x_range = c(0, 6500),  \n  y_range = c(0, 0.05))\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nNote\n\n\n\n\ndata_type argument is used to change from default “SR” to “PR” (i.e. proportions).\nx_range and y_range are used to set the range of x-axis and y-axis\n\n\n\n\n\n\n\nShow the code\nfunnel_plot(\n    numerator = covid19$Death,\n    denominator = covid19$Positive,\n    group = covid19$`Sub-district`,\n    data_type = \"PR\",   \n    x_range = c(0, 6500),  \n    y_range = c(0, 0.05),\n    label = NA,\n    title = \"Cumulative COVID-19 Fatality Rate by \\nCumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n    x_label = \"Cumulative COVID-19 Positive Cases\", \n    y_label = \"Cumulative Fatality Rate\")\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nNote\n\n\n\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#fair-visual-comparisons-using-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#fair-visual-comparisons-using-ggplot2-methods",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "3.2 Fair Visual Comparisons using ggplot2 methods",
    "text": "3.2 Fair Visual Comparisons using ggplot2 methods\nWe can also build funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\nWe need to create some statistics from the data first by deriving cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\nCompute the upper and lower limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\nStaticInteractive\n\n\n\n\nShow the code\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label= `Sub-district`), alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, y = number.ll999), \n            size = 0.4, \n            colour = \"darkblue\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, y = number.ul999), \n            size = 0.4, \n            colour = \"darkblue\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             linewidth = 0.4, \n             colour = \"darkred\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  labs(title = \"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\",\n       x = \"Cumulative Number of COVID-19 Cases\", \n       y = \"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 12),\n        legend.position = c(0.91, 0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\")) +\n  annotate(\"text\", x = 100, y = 0.03, label = \"95%\", size = 3, colour = \"red\") + \n  annotate(\"text\", x = 600, y = 0.035, label = \"99%\", size = 3, colour = \"red\")\n\np\n\n\n\n\n\n\n\nUse ggplotly to make the chart interactive.\n\nggplotly(p,tooltip = c(\"label\", \"x\", \"y\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "",
    "text": "This exercise aims to\n\nGain hands-on experience in visual statistical analysis using:ggstatsplot  package to create visual graphics with rich statistical information.\nVisualise model diagnostics and model parameters using performance and parameters packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science processes,\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests in the information-rich plots themselves.\n\n\npacman::p_load(tidyverse, ggstatsplot)\npacman::p_load(readxl, performance, parameters, see)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#data-import",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nThe following datasets are used for this exercise.\n\nToyota Corolla case study will be used. The purpose of the study is to build a model to discover factors affecting the prices of used cars by taking into consideration a set of explanatory variables.\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\nexam_data\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#one-sample-test",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#one-sample-test",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "3.1 One-sample test",
    "text": "3.1 One-sample test\ngghistostats() produces a histogram with statistical details from a one-sample test included in the plot as a subtitle."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#what-is-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#what-is-bayes-factor",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "What is Bayes Factor?",
    "text": "What is Bayes Factor?\n\nA Bayes factor is the ratio of the likelihood of an alternate hypothesis (BF10) to the likelihood of the null hypothesis (BF01). It can be interpreted as a measure of the strength of evidence in favour of one theory among two competing theories.\nIt can be any positive number.\nIt gives us a way to evaluate the data in favour of a null hypothesis and to use external information to do so. It tells us what the weight of the evidence is in favour of a given hypothesis.\nThe Schwarz criterion is one of the easiest ways to calculate a rough approximation of the Bayes Factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#two-sample-mean-test",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#two-sample-mean-test",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "3.2 Two-sample mean test",
    "text": "3.2 Two-sample mean test\nggbetweenstats() is used to build a visual for a two-sample mean test of Maths scores by gender as shown below.\n\n\nShow the code\nggbetweenstats(data = exam_data,\n              x = GENDER, \n              y = MATHS,\n              type = \"np\",\n              messages = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#one-way-anova-test",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#one-way-anova-test",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "3.3 One-way ANOVA Test",
    "text": "3.3 One-way ANOVA Test\nggbetweenstats() is used to build a visual for a one-way ANOVA test on English scores by race as shown below.\n\n\nShow the code\nggbetweenstats(data = exam_data,\n            x = RACE, \n            y = ENGLISH,\n            type = \"p\",\n            mean.ci = TRUE, \n            pairwise.comparisons = TRUE, \n            pairwise.display = \"s\", \n            p.adjust.method = \"fdr\",\n            messages = FALSE)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor pairwise.display options:\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#significant-test-of-correlation",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#significant-test-of-correlation",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "3.4 Significant Test of Correlation",
    "text": "3.4 Significant Test of Correlation\nggscatterstats() is used to build a visual for a significant Test of Correlation between Maths scores and English scores as shown below.\n\n\nShow the code\nggscatterstats(data = exam_data,\n                x = MATHS,\n                y = ENGLISH,\n                marginal = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#significant-test-of-association-dependence",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#significant-test-of-association-dependence",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "3.5 Significant Test of Association (Dependence)",
    "text": "3.5 Significant Test of Association (Dependence)\nThe Maths scores are binned into a 4-class variable by using cut() and then ggbarstats() is used to build a visual for the significant Test of Association.\n\n\nShow the code\nexam_math &lt;- exam_data %&gt;% \n  mutate(MATHS_bins = cut(MATHS, breaks = c(0,60,75,85,100)))\n\nggbarstats(exam_math, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#multiple-regression-model",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#multiple-regression-model",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "4.1 Multiple Regression Model",
    "text": "4.1 Multiple Regression Model\nThe following is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic---check-for-multicollinearity",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic---check-for-multicollinearity",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "4.2 Model Diagnostic - check for multicollinearity",
    "text": "4.2 Model Diagnostic - check for multicollinearity\nWe use check_collinearity() of performance package to check for multicollinearity.\n\ncheck_c &lt;- check_collinearity(model)\ncheck_c\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\nplot(check_c)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic---check-normality-assumption",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic---check-normality-assumption",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "4.3 Model Diagnostic - check normality assumption",
    "text": "4.3 Model Diagnostic - check normality assumption\nWe use check_normality() of performance package to check normality assumption.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\ncheck_n &lt;- check_normality(model1)\nplot(check_n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic---check-homogeneity-of-variances-assumption",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic---check-homogeneity-of-variances-assumption",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "4.4 Model Diagnostic - Check homogeneity of variances assumption",
    "text": "4.4 Model Diagnostic - Check homogeneity of variances assumption\nWe use check_heteroscedasticity() of performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\nplot(check_h)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic---complete-check",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#model-diagnostic---complete-check",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "4.5 Model Diagnostic - Complete check",
    "text": "4.5 Model Diagnostic - Complete check\nWe can also perform the complete model diagnostic by using check_model().\n\ncheck_model(model1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-regression-parameters",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-regression-parameters",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "4.6 Visualising Regression Parameters",
    "text": "4.6 Visualising Regression Parameters\n\nplot()ggcoefstats()\n\n\nWe use plot() of see package and parameters() of parameters package to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\nWe use ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "In this exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages.\nAt the same time, you will also learn how to reshape data by using tidyr package, and process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore we start making animated graphs, we should first ask ourselves: Does it make sense to go through the effort?\nIf we are conducting an exploratory data analysis, an animated graphic may not be worth the time investment. However, if we are giving a presentation, a few well-placed animated graphics can help an audience connect with our topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#basic-concepts-of-animation",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#terminology",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "Before we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore we start making animated graphs, we should first ask ourselves: Does it make sense to go through the effort?\nIf we are conducting an exploratory data analysis, an animated graphic may not be worth the time investment. However, if we are giving a presentation, a few well-placed animated graphics can help an audience connect with our topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#loading-the-r-packages",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "2.1 Loading the R Packages",
    "text": "2.1 Loading the R Packages\nWe will use the following R packages in this exercise:\n\ntidyverse, a family of modern R packages specially designed to support data science, analysis, and communication tasks including creating static statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#importing-data",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R",
    "section": "2.2 Importing Data",
    "text": "2.2 Importing Data\nFor this exercise, we will use globalPop. It is in xls file format, hence we use read_xls function of the readxl package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nNote\n\n\n\n“Country” and “Continent” are reclassified as categorical data and “Year” is reclassified as numeric integer."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this exercise, we are using ggplot2 extensions to create more elegant and effective statistical graphics using ggrepel, ggthemes, hrbrthemes, and patchwork packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-launching-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-launching-the-required-libraries",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.1 Installing and launching the required libraries",
    "text": "2.1 Installing and launching the required libraries\nThe code below uses p_load() of the Pacman package to check if all the following packages are installed on the laptop. If they are, then they will be launched into R.\n\ntidyverse\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figures created using ggplot2.\n\n\npacman::p_load(tidyverse, ggrepel,\n               ggthemes, hrbrthemes,\n               patchwork)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-the-data",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.2 Importing the data",
    "text": "2.2 Importing the data\nExam_data consists of year-end examination grades of a cohort of primary 3 students from a local school. It is in the CSV file format.\nThe code chunk below imports exam_data.csv into the R environment by using read_csv() function of the readr package (one of the tidyverse packages).\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\n\nObservations\n\n\n\n\nThis data is about students’ examination scores for their 3 subjects (English, Maths, and Science) from various classes in Primary 3 from a school.\nThere are 4 categorical variables: ID, CLASS, GENDER, and RACE, and 3 continuous variables: ENGLISH, MATHS, and SCIENCE.\nOut of the 3 subjects, Maths has the higher mean and median score."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "3.1 Working with ggrepel",
    "text": "3.1 Working with ggrepel\nLet’s replace geom_label() by geom_label_repel().\n\nggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, size = 0.5) +\n  geom_label_repel(aes(label = ID), \n              fontface = \"bold\") +\n  coord_cartesian(xlim = c(0, 100), \n                  ylim = c(0, 100)) +\n  ggtitle(\"English scores versus Maths score for Primary 3 students\")\n\n\n\n\n\n\n\n\n\n\nObservation\n\n\n\nThough the plot is neater, the annotation appears only at some data points as many points are overlapped. There is an option to increase max.overlaps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.1 Working with ggtheme package",
    "text": "4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nCheck out some of the available themes here:\n\nEconomistExcelFewSolarized\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100,\n                  color = \"grey25\", fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores (Economist theme)\") +\n  theme_economist()\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100,\n                  color = \"grey25\", fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores (Excel theme)\") +\n  theme_excel()\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100,\n                  color = \"grey25\", fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores (Few theme)\") +\n  theme_few()\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100,\n                  color = \"grey25\", fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores (Solarized theme)\") +\n  theme_solarized()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbrthemes-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbrthemes-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.2 Working with hrbrthemes package",
    "text": "4.2 Working with hrbrthemes package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100,\n                  color=\"grey25\", fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. This “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100,\n                  color=\"grey25\", fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 20, \n              base_size = 15, grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nAttributes in the theme_ipsum() function\n\n\n\n\naxis_title_size is used to increase the font size of the axis title to 20\nbase_size is used to increase the default axis label to 15\ngrid = \"Y\" is used to remove the x-axis grid lines. If set to “X”, y-axis grid lines will be removed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.1 Creating composite graphics: pathwork methods",
    "text": "5.1 Creating composite graphics: pathwork methods\nOne ggplot2 extension we are exploring in this section is patchwork.\nThe patchwork package has a very simple syntax where we can create layouts easily."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.2 Combining two ggplot2 graphs",
    "text": "5.2 Combining two ggplot2 graphs\nSimply use + to combine 2 plots in a two-column layout!\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.3 Combining three ggplot2 graphs",
    "text": "5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator to define the sequence of the plotting.\n\n\nLayout 1Layout 2Layout 3\n\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n(p1 | p2) / p3\n\n\n\n\n\n\n\np1 | p2 | p3"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.4 Creating a composite figure with tag",
    "text": "5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-an-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-an-insert",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.5 Creating a composite figure with an insert",
    "text": "5.5 Creating a composite figure with an insert\nWith inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2,\n  left = 0.02,\n  bottom = 0.7,\n  right = 0.5,\n  top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "5.6 Creating a composite figure by using patchwork and ggtheme\n\nApply theme to all plotsApply theme to a single plot\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\n\n\n(p1 / p2) | (p3 + theme_economist())"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-On_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-On_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics",
    "section": "",
    "text": "The code below uses p_load() of the pacman package to check if tidyverse packages are installed in the laptop. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\nLet’s use read_csv function of readr package to load the data from Exam_data.csv into R.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-On_Ex01/Hands-on_Ex01.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-On_Ex01/Hands-on_Ex01.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics",
    "section": "",
    "text": "The code below uses p_load() of the pacman package to check if tidyverse packages are installed in the laptop. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-On_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-On_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics",
    "section": "",
    "text": "Let’s use read_csv function of readr package to load the data from Exam_data.csv into R.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-On_Ex01/Hands-on_Ex01.html#examination-scores-distribution",
    "href": "Hands-on_Ex/Hands-On_Ex01/Hands-on_Ex01.html#examination-scores-distribution",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics",
    "section": "2.1 Examination scores distribution",
    "text": "2.1 Examination scores distribution\nLet’s create boxplots for the performance of 3 subjects and arrange them in a row for easy comparison.\n\nlibrary(\"ggpubr\")\nboxplt1 &lt;- ggplot(data = exam_data,   \n  aes(y = MATHS)) +   \n  geom_boxplot() \nboxplt2 &lt;- ggplot(data = exam_data,   \n  aes(y = ENGLISH)) +   \n  geom_boxplot()\nboxplt3 &lt;- ggplot(data = exam_data,   \n  aes(y = SCIENCE)) +   \n  geom_boxplot()\nggarrange(boxplt1, boxplt2, boxplt3, ncol = 3, nrow = 1)\n\n\n\n\n\n\n\n\n\n\nObservation\n\n\n\nStudents did better in Maths as compared to English and Science. There are some outliers in Maths and English boxplots where students did very poorly.\n\n\nLet’s dive a little deeper to see how each class performs.\n\nggplot(data = exam_data,   \n  aes(x = CLASS, y = MATHS)) +   \n  geom_boxplot()+\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour = \"red\",        \n               size = 3) \n\n\n\nggplot(data = exam_data,   \n  aes(x = CLASS, y = ENGLISH)) +   \n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour = \"red\",        \n               size = 3) \n\n\n\nggplot(data = exam_data,   \n  aes(x = CLASS, y = SCIENCE)) +   \n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour = \"red\",        \n               size = 3) \n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\nThere are 9 classes in this dataset.\nStudents from Class 3I have poorer performance in all 3 subjects (many failed 3 subjects), whereas students from Class 3A have better performance in all 3 subjects."
  },
  {
    "objectID": "Hands-on_Ex/Hands-On_Ex01/Hands-on_Ex01.html#race-distribution",
    "href": "Hands-on_Ex/Hands-On_Ex01/Hands-on_Ex01.html#race-distribution",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics",
    "section": "2.2 Race distribution",
    "text": "2.2 Race distribution\nLet’s take a look at the students’ race distribution:\n\nggplot(data = exam_data, \n       aes(x = fct_infreq(RACE))) +\n  geom_bar() +\n  labs(title=\"Distribution of race\",\n       x = \"Race\",\n       y = \"Number of students\") + \n  ylim(0, 210) +\n  geom_text(aes(label = after_stat(count)), \n            stat = \"count\", vjust = -0.5, colour = \"brown\")\n\n\n\n\n\n\n\n\n\n\nObservation\n\n\n\nFrom the bar chart above, the majority of the students are Chinese, followed by Malay.\n\n\nWhat about the race distribution in each class?\n\nggplot(data = exam_data) +\n  geom_bar(mapping = aes(x =CLASS, fill = RACE))\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\nClass 3A has more Chinese students whereas Class 3I has more Malay students.\nClass 3I has the fewest number of students."
  },
  {
    "objectID": "Hands-on_Ex/Hands-On_Ex01/Hands-on_Ex01.html#gender-distribution",
    "href": "Hands-on_Ex/Hands-On_Ex01/Hands-on_Ex01.html#gender-distribution",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics",
    "section": "2.3 Gender distribution",
    "text": "2.3 Gender distribution\nLet’s take a look at the students’ gender distribution:\n\nggplot(data = exam_data, \n       aes(x = fct_infreq(GENDER))) +\n  geom_bar() +\n  labs(title=\"Distribution of gender\",\n       x = \"Gender\",\n       y = \"Number of students\") + \n  ylim(0, 210) +\n  geom_text(aes(label = after_stat(count)), \n            stat = \"count\", vjust = -0.5, colour = \"brown\")\n\n\n\n\n\n\n\n\n\n\nObservation\n\n\n\nThere are more female students than male students.\n\n\nWhat about the distribution of gender in each class?\n\nggplot(data = exam_data) +\n  geom_bar(mapping = aes(x =CLASS, fill = GENDER))\n\n\n\n\n\n\n\n\n\n\nObservation\n\n\n\nThere are more female students in Class 3B and fewer female students in Class 3I."
  },
  {
    "objectID": "Hands-on_Ex/Hands-On_Ex01/Hands-on_Ex01.html#correlation-between-performances-of-different-subjects",
    "href": "Hands-on_Ex/Hands-On_Ex01/Hands-on_Ex01.html#correlation-between-performances-of-different-subjects",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics",
    "section": "2.4 Correlation between performances of different subjects",
    "text": "2.4 Correlation between performances of different subjects\nLet’s see if there is any correlation between the performance of Maths vs English, Maths vs Science, and English vs Science via scatter plots.\n\nggplot(data=exam_data,\n  aes(x = MATHS,y = ENGLISH)) +\n  geom_point() + \n  geom_smooth(linewidth = 0.5) +\n  # use the same axis range\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\nggplot(data=exam_data,\n  aes(x = MATHS,y = SCIENCE)) +\n  geom_point() + \n  geom_smooth(linewidth = 0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\nggplot(data=exam_data,\n  aes(x = ENGLISH, y = SCIENCE)) +\n  geom_point() + \n  geom_smooth(linewidth = 0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\nAll 3 scatter plots show some positive correlation between the performances of the subjects. However, we would need to calculate the correlation coefficients to determine how strong the correlations are."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#loading-r-packages",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "2.1 Loading R Packages",
    "text": "2.1 Loading R Packages\nWe will use the following R packages in this exercise:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that creates interactive tables on html pages.\ntidyverse, a family of modern R packages specially designed to support data science, analysis, and communication tasks including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#importing-data",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "2.2 Importing Data",
    "text": "2.2 Importing Data\nWe will use the exam_data which consists of year-end examination grades of a cohort of primary 3 students from a local school. It is in the CSV file format, hence we use read_csv() function of the readr package (one of the tidyverse packages).\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#tooltip-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#tooltip-effect",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "3.1 Tooltip effect",
    "text": "3.1 Tooltip effect\nBelow is a typical code chunk to plot an interactive statistical graph by using ggiraph package.\nThe code chunk consists of two parts. First, a ggplot object will be created with an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()). Then, girafe() of ggiraph is used to create an interactive svg object to be displayed on a html page.\n\nTooltip(single info)Tooltip(multiple info)Tooltip (Statistics)Tooltip(Customization)\n\n\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n          aes(x = MATHS)) +\n    geom_dotplot_interactive(aes(tooltip = ID),\n                             stackgroups = TRUE,\n                             binwidth = 1,\n                             method = \"histodot\") +\n    scale_y_continuous(NULL, breaks = NULL) +\n    theme_classic()\n\ngirafe(ggobj = p,\n       width_svg = 6, height_svg = 6*0.618)\n\n\n\n\n\n\n\n\nWe can add multiple information in the tooltip.\n\n\nShow the code\nexam_data &lt;- exam_data %&gt;%\n  mutate(AVESCORE = round(rowMeans(\n    exam_data[, c(\"ENGLISH\", \"MATHS\", \"SCIENCE\")]), digits = 2))\n\nexam_tooltip &lt;- c(paste0(\"Name = \", exam_data$ID, \n                         \"\\nGender = \", exam_data$GENDER,\n                         \"\\nClass = \", exam_data$CLASS,\n                          \"\\nAve Score = \", exam_data$AVESCORE,\n                          \"\\n Eng,Math,Sci: \",exam_data$ENGLISH, \",\",\n                           exam_data$MATHS, \",\", exam_data$SCIENCE))\n  \np &lt;- ggplot(data=exam_data,\n          aes(x = AVESCORE)) +\n    geom_dotplot_interactive(aes(tooltip = exam_tooltip),\n                             stackgroups = TRUE,\n                             binwidth = 1,\n                             method = \"histodot\") +\n    scale_y_continuous(NULL, breaks = NULL) +\n    theme_classic()\n\ngirafe(ggobj = p,\n       width_svg = 6, height_svg = 6*0.618)\n\n\n\n\n\n\n\n\nWe can add stat_summary() calculations in ggplot.\n\n#create a function to generate the tooltip\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\") +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2) +\n  theme_classic()\n\ngirafe(ggobj = gg_point,\n       width_svg = 8, height_svg = 8*0.618)\n\n\n\n\n\n\n\nWe can customise the tooltip styles using options in girafe.\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n          aes(x = MATHS)) +\n    geom_dotplot_interactive(aes(tooltip = ID),\n                             stackgroups = TRUE,\n                             binwidth = 1,\n                             method = \"histodot\") +\n    scale_y_continuous(NULL, breaks = NULL) +\n    theme_classic()\n\ngirafe(ggobj = p,\n       width_svg = 6, height_svg = 6*0.618,\n       options = list(\n         opts_tooltip(css = \"background-color: yellow\")))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#hover-effect-with-id",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#hover-effect-with-id",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "3.2 Hover effect with ID",
    "text": "3.2 Hover effect with ID\nWe can also use data_id specified in aes() to produce the hovering effect.\n\ndata_iddata_id (+ tooltip)data_id(with styles)data_id(customised with tooltip!)\n\n\nThe following code chunk will select all the students who belong to the same class as data_id = CLASS.\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n          aes(x = MATHS)) +\n    geom_dotplot_interactive(aes(data_id = CLASS),\n                             stackgroups = TRUE,\n                             binwidth = 1,\n                             method = \"histodot\") +\n    scale_y_continuous(NULL, breaks = NULL) +\n    theme_classic()\n\ngirafe(ggobj = p,\n       width_svg = 6, height_svg = 6*0.618)\n\n\n\n\n\n\n\n\nWe can combine data_id and tooltip in the interactivity.\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n          aes(x = MATHS)) +\n    geom_dotplot_interactive(aes(data_id = CLASS,\n                                 tooltip = ID),\n                             stackgroups = TRUE,\n                             binwidth = 1,\n                             method = \"histodot\") +\n    scale_y_continuous(NULL, breaks = NULL) +\n    theme_classic()\n\ngirafe(ggobj = p,\n       width_svg = 6, height_svg = 6*0.618)\n\n\n\n\n\n\n\n\nWe can use opts_hover() and opts_hover_inv() to customise the hovering styles.\n\nopts_hover(): effects on hovered geometrics\nopts_hover_inv(): effects on other not-selected geometrics when one geometric is hovered.\n\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n          aes(x = MATHS)) +\n    geom_dotplot_interactive(aes(data_id = CLASS),\n                             stackgroups = TRUE,\n                             binwidth = 1,\n                             method = \"histodot\") +\n    scale_y_continuous(NULL, breaks = NULL) +\n    theme_classic()\n\ngirafe(ggobj = p,                             \n  width_svg = 6, height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\")))   \n\n\n\n\n\n\n\n\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n          aes(x = MATHS)) +\n    geom_dotplot_interactive(aes(tooltip = paste0(\"Class = \", CLASS),\n                                 data_id = CLASS),\n                             stackgroups = TRUE,\n                             binwidth = 1,\n                             method = \"histodot\") +\n    scale_y_continuous(NULL, breaks = NULL) +\n    theme_classic()\n\ngirafe(ggobj = p,                             \n  width_svg = 6, height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\")))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#onclick-interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#onclick-interactivity",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "3.3 OnClick Interactivity",
    "text": "3.3 OnClick Interactivity\nonclick argument of ggiraph provides hotlink interactivity on the web.\n\n\nShow the code\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n                      aes(tooltip = \"Click me\",\n                        onclick = onclick),              \n                      stackgroups = TRUE,                  \n                      binwidth = 1,                        \n                      method = \"histodot\") +               \n  scale_y_continuous(NULL, breaks = NULL) +\n  theme_classic()\n\ngirafe(ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "3.4 Coordinated Multiple Views with ggiraph",
    "text": "3.4 Coordinated Multiple Views with ggiraph\nCoordinated multiple views refer to the visualisation when a data point of one of the plots is selected, the corresponding data point ID on the other plots will be highlighted too.\n\n\nShow the code\np1 &lt;- ggplot(data = exam_data,aes(x = MATHS)) +\n      geom_dotplot_interactive(aes(tooltip= ID, data_id = ID),\n                              stackgroups = TRUE,\n                              binwidth = 1,\n                              method = \"histodot\") +\n      coord_cartesian(xlim = c(0,100)) +\n      scale_y_continuous(NULL, breaks = NULL) +\n      theme_classic()\n      \np2 &lt;- ggplot(data = exam_data, aes(x = ENGLISH)) +\n      geom_dotplot_interactive(aes(tooltip = ID, data_id = ID),\n                              stackgroups = TRUE,\n                              binwidth = 1,\n                              method = \"histodot\") +\n      coord_cartesian(xlim = c(0,100)) +\n      scale_y_continuous(NULL, breaks = NULL)+\n      theme_classic()\n\ngirafe(code = print(p1 / p2),\n    width_svg = 6,\n    height_svg = 3.8,\n    options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation-plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-visualisation-plotly-methods",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "3.5 Interactive Data Visualisation: plotly methods",
    "text": "3.5 Interactive Data Visualisation: plotly methods\nPlotly’s R graphing library creates interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics.\nThere are two ways to create interactive graphs by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n3.5.1 plot_ly()\nThe syntax for ploty_ly() is different from ggplot().\n\nBasicVisual variables\n\n\n\n\nShow the code\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\n\nShow the code\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH,\n             color = ~RACE) \n\n\n\n\n\n\n\n\n\n\n\n\nInteractivity of plot_ly()\n\n\n\n\nFilter: When you click on the legend “Chinese”, the data points for “Chinese” are filtered away.\nTooltip: The tooltip is automatically generated and the colour of the the tooltip is synchronous with the legend colour.\nZoom-in ability: Select a range of data points, and the plot will zoom in on these data points.\nAvailable tools to use: Lasso selection, compare data on hover etc.\n\n\n\n\n\n\n\n\n3.5.2 ggplotly()\nUse ggplot() and then wrap ggplotly over. The advantage of this is no need more follow the syntax used in plotly().\n\nBasicMultiple Views\n\n\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n          aes(x = MATHS, y = ENGLISH)) +\n    geom_point(size = 1) +\n    coord_cartesian(xlim = c(0,100),\n                    ylim = c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\nShow the code\n# specify the data table to highlight in coordinate multiple views\nd &lt;- highlight_key(exam_data)\n\np1 &lt;- ggplot(data = d, \n            aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  theme_classic()\n\np2 &lt;- ggplot(data = d, \n            aes(x = MATHS, y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  theme_classic()\n\n# combine 2 ggplotly plots together\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.1 Interactive Data Table: DT package",
    "text": "4.1 Interactive Data Table: DT package\nDT package is a wrapper of the JavaScript Library DataTables.\nData objects in R can be rendered as HTML tables using the JavaScript library DataTables.\n\n\nShow the code\nDT::datatable(exam_data, \n              exam_data[c(\"ID\",\"CLASS\",\"GENDER\",\"RACE\",\n                          \"ENGLISH\",\"MATHS\",\"SCIENCE\")],\n              class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.2 Linked brushing: crosstalk method",
    "text": "4.2 Linked brushing: crosstalk method\n\n\nShow the code\nd &lt;- highlight_key(exam_data[c(\"ID\",\"CLASS\",\"GENDER\",\n                               \"RACE\",\"ENGLISH\",\"MATHS\",\"SCIENCE\")]) \np &lt;- ggplot(data = d, \n            aes(x= MATHS, y = ENGLISH)) + \n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\n# subset of the selected data points\ngg &lt;- highlight(ggplotly(p), \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "title": "Hands-on Exercise 4a: Visualing Distributions",
    "section": "",
    "text": "This exercise explores two relatively new statistical graphic methods for visualising distribution, namely the ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 4a: Visualing Distributions",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science processes,\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots, and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(ggdist, ggridges, ggthemes, \n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#data-import",
    "title": "Hands-on Exercise 4a: Visualing Distributions",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nThe following dataset is used for this exercise.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#plotting-ridgeline-graph-using-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#plotting-ridgeline-graph-using-ggridges-method",
    "title": "Hands-on Exercise 4a: Visualing Distributions",
    "section": "3.1 Plotting ridgeline graph using** ggridges method",
    "text": "3.1 Plotting ridgeline graph using** ggridges method\nThere are several ways to plot a ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots:\n\ngeom_ridgeline() takes height values directly to draw the ridgelines\ngeom_density_ridges()estimates data densities and then draws those using ridgelines\n\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n\nShow the code\nggplot(exam_data, \n       aes(x = ENGLISH, y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, \n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nTo plot a density ridges chart, we need to have one continuous variable and one categorical variable.\nThe density ridges chart is a smooth curve (interpolated from actual points), not the actual points. Hence, do not add interactivity to this chart.\nUse this chart to show the shape of the distribution (skewness/spread of the distribution or resemble normal distribution)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#varying-fill-colours-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#varying-fill-colours-along-the-x-axis",
    "title": "Hands-on Exercise 4a: Visualing Distributions",
    "section": "3.2 Varying fill colours along the x-axis",
    "text": "3.2 Varying fill colours along the x-axis\nLet’s change the area under a ridgeline filled with colours that vary in some form along the x-axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colours.\nHowever, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\noption is a character string indicating the colour map option to use. Eight options are available: “magma” (or “A”) “inferno” (or “B”) “plasma” (or “C”) “viridis” (or “D”) “cividis” (or “E”) “rocket” (or “F”) “mako” (or “G”) “turbo” (or “H”)\n\n\nShow the code\nggplot(exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = after_stat(x))) +\n  geom_density_ridges_gradient(scale = 3,\n                            rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Score\",\n                       option = \"C\") +\n  scale_x_continuous(name = \"English grades\",\n                  expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, \n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands-on Exercise 4a: Visualing Distributions",
    "section": "3.3 Mapping the probabilities directly onto colour",
    "text": "3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nThe following is plotted by mapping the probabilities calculated by using stat(ecdf) which represents the empirical cumulative density function for the distribution of English scores.\n\n\nShow the code\nggplot(exam_data,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5 - after_stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Probability\",\n                       direction = -1) +\n  scale_x_continuous(name = \"English grades\",\n                  expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, \n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou would be able to compare the 50th percentile easily as well as those 10th and 90th percentile."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands-on Exercise 4a: Visualing Distributions",
    "section": "3.4 Ridgeline plots with quantile lines",
    "text": "3.4 Ridgeline plots with quantile lines\n\nQuartilesCut-points\n\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated after_stat(quantile) aesthetic as shown in the figure below.\n\n\nShow the code\nggplot(exam_data,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(after_stat(quantile)))) +\n  stat_density_ridges(\n          geom = \"density_ridges_gradient\",\n          calc_ecdf = TRUE, \n          quantiles = 4,\n          quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  scale_x_continuous(name = \"English grades\",\n                  expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, \n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\nWe can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n\nShow the code\nggplot(exam_data,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n          geom = \"density_ridges_gradient\",\n          calc_ecdf = TRUE, \n          quantiles = c(0.025, 0.975)) +\n  scale_fill_manual(\n      name = \"Probability\",\n      values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n      labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\"))+\n  scale_x_continuous(name = \"English grades\",\n                  expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, \n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "title": "Hands-on Exercise 4c: Visualing Uncertainty",
    "section": "",
    "text": "This exercise aims to gain hands-on experience on creating statistical graphics for visualising uncertainty by:\n\nplotting statistics error bars by using ggplot2,\nplotting interactive error bars by combining ggplot2, plotly and DT,\ncreating advanced by using ggdist, and\ncreating hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 4c: Visualing Uncertainty",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science processes,\nplotly for creating interactive plot\ngganimate for creating animation plot\nDT for displaying interactive html table\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering)\n\n\n#devtools::install_github(\"wilkelab/ungeviz\")\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#data-import",
    "title": "Hands-on Exercise 4c: Visualing Uncertainty",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nThe following dataset is used for this exercise.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\nexam_data\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Exercise 4c: Visualing Uncertainty",
    "section": "3.1 Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "3.1 Visualizing the uncertainty of point estimates: ggplot2 methods\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\nHTML tableError BarsConfidence IntervalInteractive Errorbar\n\n\nLet’s plot error bars of maths scores by race by using data provided in exam_data tibble data frame and then display the information in an HTML table format.\n\n\nShow the code\nmy_sum &lt;- exam_data %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(n = n(),\n          mean = mean(MATHS),\n          sd = sd(MATHS)) %&gt;%\n  mutate(se = sd/sqrt(n-1))\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive the standard error of Maths by RACE, and the output is saved as a tibble data table called my_sum.\n\n\n\n\n\nLet’s plot the standard error bars of mean maths score by race as shown below.\n\n\nShow the code\nggplot(my_sum) +\n  geom_errorbar(aes(x = RACE, \n                  ymin = mean - se, \n                  ymax = mean + se), \n              width=0.2, \n              colour=\"black\", \n              alpha=0.9, \n              size=0.5) +\n  geom_point(aes(x = RACE, y = mean), \n           stat = \"identity\", \n           color = \"red\",\n           size = 1.5,\n           alpha = 1) +\n  ggtitle(\"Standard error of mean maths scores by race\")\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nFor geom_point(), it is important to indicate stat = “identity”.\n\n\n\n\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\n\nShow the code\nggplot(my_sum) +\n  geom_errorbar(\n            aes(x=reorder(RACE, -mean), \n                ymin = mean - 1.96*se, \n                ymax = mean + 1.96*se), \n            width=0.2, \n            colour=\"black\", \n            alpha=0.9, \n            size=0.5) +\n  geom_point(aes\n           (x=RACE, y=mean), \n           stat = \"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(title = \"95% confidence interval of mean maths scores by race\")\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\n\n\n\n\n\nLet’s plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\n\nShow the code\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x = reorder(RACE, -mean),\n                     ymin = mean - 2.58*se, \n                     ymax = mean + 2.58*se), \n                     width = 0.2, \n                     colour = \"black\", \n                     alpha = 0.9, \n                     size = 0.5) +\n           geom_point(aes(x = RACE, y = mean, \n                 text = paste(\"Race:\", `RACE`, \n                              \"&lt;br&gt;N:\", `n`,\n                              \"&lt;br&gt;Avg. Scores:\", round(mean, 2),\n                              \"&lt;br&gt;95% CI:[\", \n                              round((mean - 2.58*se), 2), \",\",\n                              round((mean + 2.58*se), 2),\"]\")),\n                 stat=\"identity\", \n                 color=\"red\", \n                 size = 1.5, \n                 alpha=1) + \n            labs(x = \"Race\", y = \"Average Scores\",\n                 title = \"99% Confidence interval of average /&lt;br&gt;maths scores by race\")) + \n            theme_minimal() + \n            theme(axis.text.x = element_text(\n                  angle = 45, vjust = 0.5, hjust=1)), tooltip = \"text\"), \n       \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Exercise 4c: Visualing Uncertainty",
    "section": "3.2 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "3.2 Visualizing the uncertainty of point estimates: ggdist methods\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\nstat_pointinterval()stat_gradientinterval()HOP\n\n\nstat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nShow the code\nexam_data %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(point_interval = \"median_qi\",\n                show.legend = FALSE) +\n  labs( title = \"Visualising confidence intervals of mean Maths scores\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\nstat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nShow the code\nggplot(exam_data, aes(x = RACE, y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE) +                        \n  labs(title = \"Visualising confidence intervals of mean Maths scores\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\nLet’ plot using Hypothetical Outcome Plots (HOPs) where users can visualize a set of draws from a distribution, where each draw is shown as a new plot in either a small multiples or animated form.\n\n\nShow the code\nggplot(data = exam_data, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 0.5) +\n  geom_hpline(data = sampler(25, group = RACE), \n              height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  labs(x = \"Race\") +\n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html",
    "title": "Hands-on Exercise 5a: Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nWe will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 5a: Creating Ternary Plot with R",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor this exercise, the following R packages will be used.\n\nggtern, a ggplot extension, specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\n\npacman::p_load(plotly, ggtern, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#data-import",
    "title": "Hands-on Exercise 5a: Creating Ternary Plot with R",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nThe Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used.\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#preparing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#preparing-the-data",
    "title": "Hands-on Exercise 5a: Creating Ternary Plot with R",
    "section": "2.3 Preparing the Data",
    "text": "2.3 Preparing the Data\nThe population data needs to be presented in a different way.\nLet’s use the mutate() function of dplyr package to derive three new measures, namely:\n\nyoung: 0 - 24 years old\nactive: 25 - 64 years old\nold: 65 years old and above\n\nThe data is filtered for 2018.\n\nagpop_mutated &lt;- pop_data %&gt;%\n# change year column from numeric to character\n  mutate(`Year` = as.character(Year))%&gt;%\n#spread the age column to multiple age-category columns\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, by placing variables in the columns and observations (or records) in rows and colouring the cells within the table.\nHeatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and detecting if any correlations exist in-between them.\nThis exercise aims to plot static and interactive heatmaps for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor this exercise, the following R packages will be used.\n\nSeriation: The package provides several visualizations (grid and ggplot2) to reveal structural information, including permuted image plots, reordered heatmaps, Bertin plots, clustering visualizations like dissimilarity plots, and visual assessment of cluster tendency plots (VAT and iVAT).\ndendextend: provides general functions for handling tree-like structures in R.\n\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#data-import",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nThe data of World Happines 2018 report will be used. The data set is downloaded from here.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#preparing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#preparing-the-data",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "2.3 Preparing the Data",
    "text": "2.3 Preparing the Data\nLet us change the rows by country name instead of row number. And then convert this to a data matrix to make our heatmap.\n\nrow.names(wh) &lt;- wh$Country \nwh1 &lt;- dplyr::select(wh, c(3, 7:12))  \nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#normalising-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#normalising-the-data",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.1 Normalising the data",
    "text": "4.1 Normalising the data\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalize and percentize.\n\nScaleNormalizePercentize\n\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation. The scale argument supports column and row scaling.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\nWhen variables in the data come from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank. This is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#clustering-algorithm",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#clustering-algorithm",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.2 Clustering algorithm",
    "text": "4.2 Clustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithms. The main arguments provided are:\n\ndistfun: to compute the distance (dissimilarity) between both rows and columns. Default is “dist”. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Default is”hclust”.\ndist_method: default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust: default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\nManualStatistical\n\n\nThis heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\nIn order to determine the best clustering method and number of clusters the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the highest optimum value.\nNext, find_k() is used to determine the optimal number of clusters.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\nFrom the graph, the optimal number of clusters, k is 3.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#seriation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#seriation",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.3 Seriation",
    "text": "4.3 Seriation\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\n\nOLOGWMeanNone\n\n\nOptimal Leaf Ordering (OLO), starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around to minimize the sum of dissimilarities between adjacent leaves.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\n\n\n“GW” (Gruvaeus and Wainer) which aims for the same goal as OLO but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\n\n\n“mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\n\n\n“none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#working-with-colour-palettes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#working-with-colour-palettes",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.4 Working with colour palettes",
    "text": "4.4 Working with colour palettes\nThe default colour palette uses by heatmaply is viridis. However, we can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap. Example of using Blues colour palette of rColorBrewer.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#finishing-touch",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.5 Finishing touch",
    "text": "4.5 Finishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\n\nShow the code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "",
    "text": "A Treemap displays hierarchical data as a set of nested rectangles. Each group is represented by a rectangle, whose area is proportional to its value. In this exercise, we will learn how to manipulate transaction data into a treemap structure by using selected functions provided in dplyr package. Then, we will learn how to plot static treemap by using treemap package. Finally, we will learn how to design an interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "2.1 Installing and loading the packages",
    "text": "2.1 Installing and loading the packages\nFor this exercise, the following R packages will be used.\n\ntreemap is a space-filling visualization of hierarchical structures. This function offers great flexibility to draw treemaps.\ntreemapify draws the treemap without the help of the ggplot2 geoms, or for some edge cases such as creating interactive treemaps with ‘RShiny’.\nd3treeRis the primary function for creating interactive d3.js treemaps from various data types in R.\n\n\ninstall.packages(\"devtools\")\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\n\npacman::p_load(treemap, treemapify, d3treeR, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#data-import",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "2.2 Data import",
    "text": "2.2 Data import\nThe data of private property transaction records in 2018 is extracted from REALIS portal of Urban Redevelopment Authority (URA).\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#preparing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#preparing-the-data",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "2.3 Preparing the Data",
    "text": "2.3 Preparing the Data\nThe data frame realis2018 is in transaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. Hence, we will need perform the following steps to manipulate and prepare a data frame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nWe will use group_by() and summarize() of dplyr package.\ngroup_by()breaks down a data frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nLet us look at how to group summaries without pipe and with pipe (%&gt;%) .\n\nTo learn more about pipe, visit this excellent article: Pipes in R Tutorial For Beginners.\n\n\nWithout pipeWith pipe\n\n\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\nNote\n\n\n\nThe argument na.rm = TRUE removes the missing values prior to computation.\n\n\n\n\nThis is a more efficient method.\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  }
]