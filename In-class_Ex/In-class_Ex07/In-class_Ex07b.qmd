---
title: "In-class Exercise 7b: Geospatial Analysis using R"
author: "Vanessa Heng"
date: "March 9, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
editor: visual
---

# 1 Overview

This exercise is to give us more practices on handling geospatial data.

# 2 Getting started

## 2.1 Installing and loading the packages

For this exercise, the following R packages will be used:

-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data.
-   viridis: colour library
-   [terra](https://rspatial.github.io/terra/) is a replacement for the [raster](https://cran.r-project.org/web/packages/raster/) package. It has a very similar, but simpler, interface, and it is faster than raster. In this hands-on exercise, it will be used to create grid (also known as raster) objects as the input and output of spatial interpolation.
-   [gstat](http://r-spatial.github.io/gstat/), an R package for spatial and spatio-temporal geostatistical modelling, prediction and simulation. In this in-class exercise, it will be used to perform spatial interpolation.
-   [automap](https://cran.r-project.org/web/packages/automap/), an r package for performing automatic variogram modelling and kriging interpolation.

```{r}
pacman::p_load(sf, terra, gstat, tmap, viridis, tidyverse, automap)
```

## 2.2 Load data

The datasets used are:

-   *RainfallStation.csv* provides location information on existing rainfall stations in Singapore. The data is downloaded from [Meteorological Service Singapore](http://www.weather.gov.sg/home/).

-   *DAILYDATA_202402.csv* provides weather data are rainfall stations for February 2024. The data is also downloaded from [Meteorological Service Singapore](http://www.weather.gov.sg/home/).

-   *MPSZ-2019* contains the planning subzone boundary of URA Master Plan 2019. It is downloaded from data.gov.sg. The original data is in kml format.

### Importing rainfall station data

```{r}
rfstations <- read_csv("data/aspatial/RainfallStation.csv")
```

### Importing rainfall record data

We sum the total rainfall by month.

```{r}
rfdata <- read_csv("data/aspatial/DAILYDATA_202402.csv") %>% 
   select (c(1,5)) %>%  #select column 1 and 5 which is station and total rainfall
   group_by(Station) %>% 
   summarise(MONTHSUM = sum(`Daily Rainfall Total (mm)`)) %>% 
   ungroup()
```

### Converting aspatial data into geospatial data

Join these 2 datasets using left-join so that we only join the latitude and longitude of the stations that have rainfall values.

```{r}
rfdata <- rfdata %>% 
   left_join(rfstations)

```

Convert it to the projected coordinate system using crs = 3414.

```{r}
rfdata_sf <- st_as_sf(rfdata, 
                      coords = c("Longitude",
                                 "Latitude"),
                      crs = 4326) %>% 
   st_transform(crs = 3414)
```

::: callout-note
-   For `coords` argument, it is important to map the X (i.e. Longitude) first, then follow by the Y (i.e. Latitude).

-   `crs = 4326` indicates that the source data is in the wgs84 coordinates system.

-   `st_transform()` of sf package is then used to transform the source data from wgs84 to svy21 projected coordinates system.

-   svy21 is the official projected coordinates of Singapore. 3414 is the EPSG code of svy21.
:::

### Importing planning subzone boundary data

```{r}
mpsz2019 <-st_read(dsn = "data/geospatial/", 
                  layer = "MPSZ-2019") %>% 
   st_transform(crs = 3414)
```

### Visualising the data

```{r}
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
tm_shape(mpsz2019) +
   tm_borders() +
   tm_shape(rfdata_sf) +
   tm_dots(col = 'MONTHSUM')

tmap_mode("plot")
```

# 3 Spatial Interpolation: gstat method

In this section, we perform spatial interpolation by using **gstat** package. We need to create an object of class called *gstat*, using a function of the same name: `gstat`. A gstat object contains all the necessary information to conduct spatial interpolation, namely:

-   The model definition

-   The calibration data

Based on its arguments, the gstat function “understands” what type of interpolation model we want to use:

-   No variogram model → IDW

-   Variogram model, no covariates → Ordinary Kriging

-   Variogram model, with covariates → Universal Kriging

## 3.1 Data Preparation

We need to create a grid data object by using `rast()` of **terra** package. Note that the nrows and ncols are calculated depending on the resolution we want. (using bounding box (xmax - xmin)/ resolution))

```{r}
grid <- terra::rast(mpsz2019,
                    nrows = 690,
                    ncols = 1075)

xy <- terra::xyFromCell(grid, 
                        1:ncell(grid))
```

::: callout-note
`xyFromCell()` gets coordinates of the centre of raster cells for a row, column, or cell number of a SpatRaster. Or get row, column, or cell numbers from coordinates or each other.
:::

Lastly, we will create a data frame called *`coop`* with prediction/simulation locations.

```{r}
coop <- st_as_sf(as.data.frame(xy), 
                 coords = c("x", "y"),
                 crs = st_crs(mpsz2019))
coop <- st_filter(coop, mpsz2019)
head(coop)
```

## 3.2 Inverse Distance Weighted (IDW)

In the IDW interpolation method, the sample points are weighted during interpolation such that the influence of one point relative to another declines with distance from the unknown point you want to create.

![](images/clipboard-1464243735.png){width="582"}

Weighting is assigned to sample points through the use of a weighting coefficient that controls how the weighting influence will drop off as the distance from new point increases. The greater the weighting coefficient, the less the effect points will have if they are far from the unknown point during the interpolation process. As the coefficient increases, the value of the unknown point approaches the value of the nearest observational point.

It is important to notice that the IDW interpolation method also has some disadvantages: the quality of the interpolation result can decrease, if the distribution of sample data points is uneven. Furthermore, maximum and minimum values in the interpolated surface can only occur at sample data points. This often results in small peaks and pits around the sample data points.

```{r}
res <- gstat(formula = MONTHSUM ~ 1, 
             locations = rfdata_sf,
             nmax = 5,
             set = list(idp = 0))

```

Now that our model is defined, we can use `predict()` to interpolate, i.e., to calculate predicted values. The predict function accepts:

-   A raster—stars object, such as dem

-   A model—gstat object, such as g

The raster serves two purposes:

-   Specifying the locations where we want to make predictions (in all methods), and

-   Specifying covariate values (in Universal Kriging only).

```{r}
resp <- predict(res, coop)

# inverse distance weighted interpolation
resp$x <- st_coordinates(resp)[,1]
resp$y <- st_coordinates(resp)[,2]
resp$pred <- resp$var1.pred

pred <- terra::rasterize(resp, grid, 
                         field = "pred", 
                         fun = "mean")
```

Now, we will map the interpolated surface by using tmap functions.

```{r}


tmap_options(check.and.fix = TRUE)
tmap_mode("plot")
tm_shape(pred) + 
  tm_raster(alpha = 0.6, 
            palette = "viridis")
```

# 4 Kriging

Kriging is one of several methods that use a limited set of sampled data points to estimate the value of a variable over a continuous spatial field. An example of a value that varies across a random spatial field might be total monthly rainfall over Singapore. It differs from Inverse Distance Weighted Interpolation discussed earlier in that it uses the spatial correlation between sampled points to interpolate the values in the spatial field: the interpolation is based on the spatial arrangement of the empirical observations, rather than on a presumed model of spatial distribution. Kriging also generates estimates of the uncertainty surrounding each interpolated value.

In a general sense, the kriging weights are calculated such that points nearby to the location of interest are given more weight than those farther away. Clustering of points is also taken into account, so that clusters of points are weighted less heavily (in effect, they contain less information than single points). This helps to reduce bias in the predictions.

The kriging predictor is an “optimal linear predictor” and an exact interpolator, meaning that each interpolated value is calculated to minimize the prediction error for that point. The value that is generated from the kriging process for any sampled location will be equal to the observed value at this point, and all the interpolated values will be the Best Linear Unbiased Predictors (BLUPs).

Kriging will in general not be more effective than simpler methods of interpolation if there is little spatial autocorrelation among the sampled data points (that is, if the values do not co-vary in space). If there is at least moderate spatial autocorrelation, however, kriging can be a helpful method to preserve spatial variability that would be lost using a simpler method (for an example, see Auchincloss 2007, below).

Kriging can be understood as a two-step process:

-   The spatial covariance structure of the sampled points is determined by fitting a variogram

-   The weights derived from this covariance structure are used to interpolate values for unsampled points or blocks across the spatial field.

Kriging methods require a variogram model. A variogram (sometimes called a “semivariogram”) is a visual depiction of the covariance exhibited between each pair of points in the sampled data. For each pair of points in the sampled data, the gamma-value or “semi-variance” (a measure of the half mean-squared difference between their values) is plotted against the distance, or “lag”, between them. The “experimental” variogram is the plot of observed values, while the “theoretical” or “model” variogram is the distributional model that best fits the data.

![](images/clipboard-1521787385.png){width="507"}

Firstly, we will calculate and examine the empirical variogram by using `variogram()` of **gstat** package. The function requires two arguments:

-   formula, the dependent variable and the covariates (same as in gstat, see Section 12.2.1)

-   data, a point layer with the dependent variable and covariates as attributes

```{r}         
v <- variogram(MONTHSUM ~ 1,
               data = rfdata_sf) 
plot(v)
```

With reference to the comparison above, am empirical variogram model will be fitted by using fit.variogram() of gstat package.
```{r}
fv <- fit.variogram(object = v,
                    model = vgm(
                      psill = 0.5, 
                      model = "Sph",
                      range = 5000, 
                      nugget = 0.1))
fv
```
We can visualise how well the observed data fit the model by plotting fv using the code chunk below.

```{r}
plot(v, fv)
```

The plot above reveals that the empirical model fits rather well. In view of this, we will go ahead to perform spatial interpolation by using the newly derived model as shown in the code chunk below.

```{r}
k <- gstat(formula = MONTHSUM ~ 1, 
           data = rfdata_sf, 
           model = fv)
k
```

Now we use `predict()` of gstat package will be used to estimate the unknown grids by using the code chunk below.

```{r}
resp <- predict(k, coop)

#using ordinary kriging
resp$x <- st_coordinates(resp)[,1]
resp$y <- st_coordinates(resp)[,2]
resp$pred <- resp$var1.pred
resp$pred <- resp$pred
resp

```

In order to create a raster surface data object, rasterize() of terra is used as shown in the code chunk below.

```{r}
kpred <- terra::rasterize(resp, grid, 
                         field = "pred")
kpred
```

## 4.1 Mapping the interpolated rainfall raster
Finally, tmap functions are used to map the interpolated rainfall raster (i.e. kpred) by using the code chunk below.

```{r}
tmap_options(check.and.fix = TRUE)
tmap_mode("plot")
tm_shape(kpred) + 
  tm_raster(alpha = 0.6, 
            palette = "viridis",
            title = "Total monthly rainfall (mm)") +
  tm_layout(main.title = "Distribution of monthly rainfall, Feb 2024",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2)
```


## 4.2 Automatic variogram modelling
Beside using gstat to perform variogram modelling manually, autofirVariogram() of automap package can be used to perform varigram modelling as shown in the code chunk below.

```{r}
v_auto <- autofitVariogram(MONTHSUM ~ 1, 
                           rfdata_sf)
plot(v_auto)
v_auto
```

```{r}
k <- gstat(formula = MONTHSUM ~ 1, 
           model = v_auto$var_model,
           data = rfdata_sf)
k
```

```{r}
resp <- predict(k, coop)

#using ordinary kriging
resp$x <- st_coordinates(resp)[,1]
resp$y <- st_coordinates(resp)[,2]
resp$pred <- resp$var1.pred
resp$pred <- resp$pred

kpred <- terra::rasterize(resp, grid, 
                         field = "pred")

tmap_options(check.and.fix = TRUE)
tmap_mode("plot")
tm_shape(kpred) + 
  tm_raster(alpha = 0.6, 
            palette = "viridis",
            title = "Total monthly rainfall (mm)") +
  tm_layout(main.title = "Distribution of monthly rainfall, Feb 2024",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2)
```