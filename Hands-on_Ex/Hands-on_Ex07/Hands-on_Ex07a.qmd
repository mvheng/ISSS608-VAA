---
title: "Hands-on Exercise 7a: Choropleth Mapping with R"
author: "Vanessa Heng"
date: "February 28, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
editor: visual
---

# 1 Overview

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colours. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of the aged population of Singapore by Master Plan 2014 Subzone Boundary.

In this exercise, we will learn how to plot functional and truthful choropleth maps by using an R package called [**tmap**](https://cran.r-project.org/web/packages/tmap/) package.

# 2 Getting Started

## 2.1 Installing and loading the packages

For this exercise, the following R packages will be used:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data.

Among the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## 2.2 Data import

Two datasets will be used to create the choropleth map. They are:

-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format. It can be downloaded at [data.gov.sg](https://data.gov.sg/) This is geospatial data which consists of the geographical boundary of Singapore at the planning subzone level. The data is based on the URA Master Plan 2014.

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in CSV format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data file. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, its PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.

The code chunk below uses the `st_read()` function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.

```{r}
mpsz <- st_read(dsn = "data/geospatial",  
                layer = "MP14_SUBZONE_WEB_PL")
```

Let's examine the data.

```{r}
mpsz
```

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv") 
popdata
```

## 2.3 Data Preparation

Before a thematic map can be prepared, we are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, and DEPENDENCY.

-   YOUNG: age group 0 to 4 until age group 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age groups, and

-   DEPENDENCY: the ratio between young and aged against the economy active group

::: panel-tabset
#### Data wrangling

The following data wrangling and transformation functions will be used:

-   `pivot_wider()` of **tidyr** package, and

-   `mutate()`, `filter()`, `group_by()` and `select()` of **dplyr** package

```{r}
popdata2020 <- popdata %>%   
  filter(Time == 2020) %>%   
  group_by(PA, SZ, AG) %>%   
  summarise(`POP` = sum(`Pop`)) %>% 
  ungroup() %>%  
  pivot_wider(names_from = AG,
              values_from = POP) 

popdata2020 <- popdata2020 %>% 
  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[14])) %>% 
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13]) + rowSums(.[15]))%>%
  mutate(`AGED`=rowSums(.[16:21])) %>%   mutate(`TOTAL`=rowSums(.[3:21])) %>%
  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
         `ECONOMY ACTIVE`, `AGED`,    
         `TOTAL`, `DEPENDENCY`)
```

#### Joining the attribute data and geospatial data

Before we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.

```{r}
popdata2020 <- popdata2020 %>%   
  mutate_at(.vars = vars(PA, SZ),    
            .funs = list(toupper)) %>%  
  filter(`ECONOMY ACTIVE` > 0) 
```
:::

Next, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,                     
                          by = c("SUBZONE_N" = "SZ"))
```

`left_join()` of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

# 3 Choropleth Mapping Geospatial Data Using tmap

Two approaches can be used to prepare a thematic map using *tmap*, they are:

-   Plotting a thematic map quickly by using `qtm()`.

-   Plotting highly customisable thematic maps by using tmap elements.

## 3.1 Plotting a choropleth map quickly by using `qtm()`

The easiest and quickest to draw a choropleth map using **tmap** is using `qtm()`. It is concise and provides a good default visualisation in many cases.

The code chunk below will draw a cartographic standard choropleth map as shown below.

```{r}
tmap_mode("plot")  
qtm(mpsz_pop2020, fill = "DEPENDENCY")
```

::: callout-note
-   `tmap_mode()` with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.

-   `fill` argument is used to map the attribute (i.e. DEPENDENCY)
:::

## 3.2 Creating a choropleth map by using tmap’s elements

Despite its usefulness in drawing a choropleth map quickly and easily, the disadvantage of `qtm()` is that it makes the aesthetics of individual layers harder to control. To draw a high-quality cartographic choropleth map as shown in the figure below, **tmap**’s drawing elements should be used.

```{r}
tm_shape(mpsz_pop2020) +   
  tm_fill("DEPENDENCY",            
          style = "quantile",          
          palette = "Blues",          
          title = "Dependency ratio") + 
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center", 
            main.title.size = 1.2,        
            legend.height = 0.45,   
            legend.width = 0.35,       
            frame = TRUE) +  
  tm_borders(alpha = 0.5) +   
  tm_compass(type="8star", size = 2) + 
  tm_scale_bar() +   
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authority (URA)\n and Population data from Department of Statistics DOS",    
             position = c("left", "bottom"))
```

In the following sub-section, we will explore how tmap functions are used to plot these elements.

::: panel-tabset
# Draw a base map

The basic building block of **tmap** is `tm_shape()` followed by one or more layer elements such as `tm_fill()` and `tm_polygons()`.

In the code chunk below, `tm_shape()` is used to define the input data (i.e mpsz_pop2020) and `tm_polygons()` is used to draw the planning subzone polygons.

```{r}
tm_shape(mpsz_pop2020) +   
  tm_polygons()
```

#### Draw a choropleth map

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to `tm_polygons()`.

```{r}
tm_shape(mpsz_pop2020) + 
  tm_polygons("DEPENDENCY")
```

::: callout-note
-   The default interval binning used to draw the choropleth map is called “pretty”.

-   The default colour scheme used is YlOrRd of ColorBrewer.

-   By default, missing values will be shaded in grey.
:::

# Using `tm_fill()` and `tm_border()`

Actually, `tm_polygons()` is a wraper of `tm_fill()` and `tm_border()`. `tm_fill()` shades the polygons by using the default colour scheme and `tm_borders()` adds the borders of the shapefile onto the choropleth map.

The code chunk below draws a choropleth map by using `tm_fill()` alone.

```{r}
tm_shape(mpsz_pop2020) +     
  tm_fill("DEPENDENCY") +   
  tm_borders(lwd = 0.1,  alpha = 1)
```

::: callout-out
The planning subzones are shared according to the respective dependency values.

The light-grey border lines have been added to the choropleth map.

These are the arguments for tm_borders() to change the asethestic:

-   alpha = the transparency number between 0 (totally transparent) and 1 (not transparent). The default is 1.

-   col = border colour

-   lwd = border line width. The default is 1.

-   lty = borderline type. The default is “solid”.
:::
:::

## 3.3 Data classification methods of tmap

Most choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.

**tmap** provides a total of ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.

To define a data classification method, the `style` argument of `tm_fill()` or `tm_polygons()` will be used.

::: panel-tabset
# Built-in classification methods

The code chunk below shows a quantile data classification that used 5 classes and 'jenks' style.

```{r}
tm_shape(mpsz_pop2020)+   
  tm_fill("DEPENDENCY",      
          n = 5,          
          style = "jenks") +  
  tm_borders(alpha = 0.5)
```

The code chunk below shows a quantile data classification that used 5 classes and 'equal' style.

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_fill("DEPENDENCY",    
          n = 5,         
          style = "equal") + 
  tm_borders(alpha = 0.5)
```

::: callout-warning
# Warning: Maps Lie!

The distribution of quantile data classification using 'jenks' method is more evenly distributed than 'equal' method.

Hence, when preparing choropleth maps, we should use different classification methods supported by tmap and compare their differences.

We should also use similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20) and compare the differences.
:::

::: panel-tabset
# 2 classes

```{r}
tm_shape(mpsz_pop2020)+  
  tm_fill("DEPENDENCY",     
          n = 2,           
          style = "jenks") +  
  tm_borders(alpha = 0.5)
```

# 6 classes

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_fill("DEPENDENCY",       
          n = 6,           
          style = "jenks") + 
  tm_borders(alpha = 0.5)
```

# 10 classes

```{r}
tm_shape(mpsz_pop2020) +  
  tm_fill("DEPENDENCY",      
          n = 10,       
          style = "jenks") +  
  tm_borders(alpha = 0.5)
```

# 20 classes

```{r}
tm_shape(mpsz_pop2020) +  
  tm_fill("DEPENDENCY",         
          n = 20,          
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

For our data, it is not suitable to use a big number of classes, as we can see all the 19 classes are for the dependency range from 0 to 1.33 (too granular).
:::

# Category break

For all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly using the `breaks` argument to the `tm_fill()`. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, to end up with n categories, n+1 elements must be specified in the `breaks` option (the values must be in increasing order).

Let's get some descriptive statistics on the variable first before setting the breakpoints. The code chunk below will be used to compute and display the descriptive statistics of the **DEPENDENCY** field.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

Based on the results above, we set breakpoints at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 1.

Now, we will plot the choropleth map by using the code chunk below.

```{r}
tm_shape(mpsz_pop2020) +     
  tm_fill("DEPENDENCY",             
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +    
  tm_borders(alpha = 0.5)
```
:::

## 3.4 Colour Scheme

**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.

To change the colour, we assign the preferred colour to `palette` argument of `tm_fill()` as shown in the code chunk below.

```{r}
tm_shape(mpsz_pop2020)+   
  tm_fill("DEPENDENCY",            
          n = 6,                     
          style = "quantile",                    
          palette = "Blues") +    
  tm_borders(alpha = 0.5)
```

To reverse the colour shading, add a “-” prefix.

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY",     
          style = "quantile",      
          palette = "-Blues") +
  tm_borders(alpha = 0.5)
```

## 3.5 Map Layouts

Map layout refers to the combination of all map elements into a cohesive map. Map elements include among other objects to be mapped, the title, the scale bar, the compass, margins and aspect ratios.

::: panel-tabset
# Map Legend

In **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.

```{r}
tm_shape(mpsz_pop2020) +   
  tm_fill("DEPENDENCY",    
          style = "jenks",     
          palette = "Blues",    
          legend.hist = TRUE,      
          legend.is.portrait = TRUE, 
          legend.hist.z = 0.1) +  
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",       
            main.title.position = "center",  
            main.title.size = 1,       
            legend.height = 0.45,          
            legend.width = 0.35,          
            legend.outside = FALSE,        
            legend.position = c("right", "bottom"),   
            frame = FALSE) +   
  tm_borders(alpha = 0.5)
```

# Map style

tmap allows a wide variety of layout settings to be changed. They can be called by using `tmap_style()`.

The code chunk below shows the classic style is used.

```{r}
tm_shape(mpsz_pop2020) +  
  tm_fill("DEPENDENCY",        
          style = "quantile",   
          palette = "-Greens") +  
  tm_borders(alpha = 0.5) +  
  tmap_style("classic")
```

# Cartographic Furniture

Beside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.

In the code chunk below, `tm_compass()`, `tm_scale_bar()` and `tm_grid()` are used to add compass, scale bar and grid lines onto the choropleth map.

```{r}
tm_shape(mpsz_pop2020)+  
  tm_fill("DEPENDENCY",          
          style = "quantile",       
          palette = "Blues",          
          title = "No. of persons") + 
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",             main.title.position = "center",  
            main.title.size = 1.2,          
            legend.height = 0.45,         
            legend.width = 0.35,         
            frame = TRUE) +   
  tm_borders(alpha = 0.5) +  
  tm_compass(type="8star", size = 2) + 
  tm_scale_bar(width = 0.15) +   
  tm_grid(lwd = 0.1, alpha = 0.2) +  
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authority (URA)\n and Population data from Department of Statistics DOS",  
             position = c("left", "bottom"))
```

To reset the default style, refer to the code chunk below.

```{r}
tmap_style("white")
```
:::

## 3.6 Drawing Small Multiple Choropleth Maps

Small multiple maps, also referred to as facet maps, are composed of many maps arranged side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.

In tmap, small multiple maps can be plotted in three ways:

-   by assigning multiple values to at least one of the asthetic arguments,

-   by defining a group-by variable in `tm_facets()`, and

-   by creating multiple stand-alone maps with `tmap_arrange()`.

::: panel-tabset
# Use aesthetic arguments tm_fill()

In this example, small multiple choropleth maps are created by defining ncols in `tm_fill()`.

```{r}
tm_shape(mpsz_pop2020)+  
  tm_fill(c("YOUNG", "AGED"), 
          style = "equal",     
          palette = "Blues") + 
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) + 
  tmap_style("white")
```

# Use aesthetic arguments tm_polygons()

In this example, small multiple choropleth maps are created by assigning multiple values to `tm_polygons()` with different palette.

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons(c("DEPENDENCY","AGED"),   
              style = c("equal", "quantile"),   
              palette = list("Blues","Greens")) + 
  tm_layout(legend.position = c("right", "bottom"))
```

# Using tm_facets()

In this example, multiple small choropleth maps are created by using `tm_facets()`.

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY",    
          style = "quantile",   
          palette = "Blues",    
          thres.poly = 0) +   
  tm_facets(by="REGION_N",        
            free.coords=TRUE,        
            drop.shapes=FALSE) + 
  tm_layout(legend.show = FALSE,         
            title.position = c("center", "center"), 
            title.size = 20) +   
  tm_borders(alpha = 0.5)
```

# Using tmap_arrange()

In this example, multiple small choropleth maps are created by creating multiple stand-alone maps with `tmap_arrange()`.

```{r}
youngmap <- tm_shape(mpsz_pop2020) +   
  tm_polygons("YOUNG",               
              style = "quantile",     
              palette = "Blues")  
agedmap <- tm_shape(mpsz_pop2020) + 
  tm_polygons("AGED",            
              style = "quantile", 
              palette = "Blues")  
tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```
:::

## 3.7 Mapping Spatial Object Meeting a Selection Criterion

Instead of creating small multiple choropleth maps, we can also use a selection function to map spatial objects meeting the selection criterion.

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ]) +  
  tm_fill("DEPENDENCY",            
          style = "quantile",       
          palette = "Blues",           
          legend.hist = TRUE,        
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +   
  tm_layout(legend.outside = TRUE,    
            legend.height = 0.45,   
            legend.width = 5.0,       
            legend.position = c("right", "bottom"),
            frame = FALSE) +   
  tm_borders(alpha = 0.5)
```

# 4 Reference

## 4.1 All about tmap package

-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)

-   [tmap](https://cran.r-project.org/web/packages/tmap/)

-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)

-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)

-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)

-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)

## 4.2 Geospatial data wrangling

-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/)

-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)

-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)

## 4.3 Data wrangling

-   [dplyr](https://dplyr.tidyverse.org/)

-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)

-   [tidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)
