---
title: "Hands-on Exercise 9: Information Dashboard Design: R methods"
author: "Vanessa Heng"
date: "March 12, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
editor: visual
---

# 1 Overview

By the end of this exercise, we will be able to:

-   create a bullet chart by using ggplot2

-   create sparklines by using ggplot2

-   build industry standard dashboard by using R Shiny.

# 2 Getting started

## 2.1 Installing and loading the packages

For this exercise, the following R packages will be used.

-   [tidyverse](https://www.tidyverse.org/) provides a collection of functions for performing data science tasks such as importing, tidying, wrangling data and visualising data. It is not a single package but a collection of modern R packages including but not limited to [readr](https://readr.tidyverse.org/), [tidyr](https://tidyr.tidyverse.org/), [dplyr](https://dplyr.tidyverse.org/), [ggplot](https://ggplot2.tidyverse.org/), [tibble](https://tibble.tidyverse.org/), [stringr](https://stringr.tidyverse.org/), [forcats](https://forcats.tidyverse.org/) and [purrr](https://purrr.tidyverse.org/).

-   [lubridate](https://r4va.netlify.app/chap31) provides functions to work with dates and times more efficiently.

-   [ggthemes](https://r4va.netlify.app/chap31) is an extension of ggplot2. It provides additional [themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) beyond the basic themes of ggplot2.

-   [gtExtras](https://jthomasmock.github.io/gtExtras/) provides some additional helper functions to assist in creating beautiful tables with [gt](https://gt.rstudio.com/), an R package specially designed for anyone to make wonderful-looking tables using the R programming language.

-   [reactable](https://glin.github.io/reactable/) provides functions to create interactive data tables for R, based on the [React Table](https://github.com/tanstack/table/tree/v7) library and made with [reactR](https://github.com/react-R/reactR).

-   [reactablefmtr](https://kcuilla.github.io/reactablefmtr/) provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes.

-   [**RODBC**](https://cran.r-project.org/web/packages/RODBC/) package to import a database query table into R.

-   [dataui](https://github.com/timelyportfolio/dataui) package to create interactive visualisations like sparklines.

```{r}
pacman::p_load(lubridate, ggthemes, reactable,
               reactablefmtr, gt, gtExtras, tidyverse, RODBC, dataui)

#remotes::install_github("timelyportfolio/dataui")
```

## 2.2 Data import from Microsoft Access database

A personal database in Microsoft Access mdb format called *Coffee Chain* will be used. `odbcConnectAccess()` of [**RODBC**](https://cran.r-project.org/web/packages/RODBC/) package is used to import a database query table into R.

```{r}
#| eval: false
con <- odbcConnectAccess2007('data/Coffee Chain.mdb')
coffeechain <- sqlFetch(con, 'CoffeeChain Query')
write_rds(coffeechain, "data/CoffeeChain.rds")
odbcClose(con)
```

::: callout-note
We need to change the R system to 32-bit version. This is because the `odbcConnectAccess()`is based on 32-bit and not 64-bit.
:::

# 3 Bullet chart

## 3.1 Data Preparation

The code chunk below is used to import *CoffeeChain.rds* into R.

```{r}
coffeechain <- read_rds("data/rds/CoffeeChain.rds")
```

The code chunk below is used to aggregate Sales and Budgeted Sales at the Product level.

```{r}
product <- coffeechain %>%   
   group_by(`Product`) %>%   
   summarise(`target` = sum(`Budget Sales`),            
             `current` = sum(`Sales`)) %>%  
   ungroup()
```

## 3.2 Bullet chart using ggplot2

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggplot(product, aes(Product, current)) + 
   geom_col(aes(Product, max(target) * 1.01),
           fill = "grey85", width = 0.85) +
   geom_col(aes(Product, target * 0.75),
           fill = "grey60", width = 0.85) +
   geom_col(aes(Product, target * 0.5),
           fill = "grey50", width = 0.85) +
   geom_col(aes(Product, current), 
           width = 0.35,
           fill = "black") + 
   geom_errorbar(aes(y = target,
                    x = Product, 
                    ymin = target,
                    ymax = target), 
                width = 0.4,
                colour = "red",
                linewidth = 1) +
   coord_flip() + 
   theme_minimal() +
   labs( y = "Current Sales")
```

# 4 Sparklines

## 4.1 Plot Sparklines using ggplot2

::: panel-tabset
## Data Preparation

We will filter the sales that are after 1 Jan 2013 and summarize the total sales by Month and Product

```{r}
sales_report <- coffeechain %>%    
   filter(Date >= "2013-01-01") %>%   
   mutate(Month = month(Date)) %>%   
   group_by(Month, Product) %>%     
   summarise(Sales = sum(Sales)) %>% 
   ungroup() %>%      
   select(Month, Product, Sales)
```

Let's also compute the minimum and maximum of the monthly sales by product and the end of month sales for each product.

```{r}
mins <- group_by(sales_report, Product) %>%   
   slice(which.min(Sales)) 
maxs <- group_by(sales_report, Product) %>% 
   slice(which.max(Sales)) 
ends <- group_by(sales_report, Product) %>%   
   filter(Month == max(Month))
```

The code chunk below is used to compute the 25th and 75th quantiles.

```{r}
quarts <- sales_report %>%  
   group_by(Product) %>%  
   summarise(quart1 = quantile(Sales,   
                               0.25),         
             quart2 = quantile(Sales,        
                               0.75)) %>%  
   right_join(sales_report)
```

## Plot Sparkline

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-width: 10
ggplot(sales_report, aes(x=Month, y=Sales)) + 
  facet_grid(Product ~ ., scales = "free_y") + 
  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), 
              fill = 'grey90') +
  geom_line(size=0.3) +
  geom_point(data = mins, col = 'red') +
  geom_point(data = maxs, col = 'blue') +
  geom_text(data = mins, aes(label = Sales), vjust = -1) +
  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +
  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +
  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +
  expand_limits(x = max(sales_report$Month) + 
                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +
  scale_x_continuous(breaks = seq(1, 12, 1)) +
  scale_y_continuous(expand = c(0.1, 0)) +
  theme_tufte(base_size = 3, base_family = "Helvetica") +
  theme(axis.title=element_blank(), axis.text.y = element_blank(), 
        axis.ticks = element_blank(), strip.text = element_blank())

```
:::

## 4.2 Plot Sparklines using gtExtra

::: panel-tabset
## Data Preparation

```{r}
report <- coffeechain %>%
  mutate(Year = year(Date)) %>%
  filter(Year == "2013") %>%
  mutate (Month = month(Date, 
                        label = TRUE, 
                        abbr = TRUE)) %>%
  group_by(Product, Month) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup()

```

One of the requirements of gtExtras functions is to pass data.frame with list columns. Hence, we need to convert the report data.frame into list columns.

```{r}
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")

```

## Plot Sparklines

```{r}
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop") %>%
   gt() %>%
   gt_plt_sparkline('Monthly Sales',
                    same_limit = FALSE)

```

## Plot Sparklines with Statistics

Get the summary statistics:

```{r}
report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            ) %>%
  gt() %>%
  fmt_number(columns = 4, decimals = 2)

```

Add the statistics to the table:

```{r}
spark <- report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")

sales <- report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            )

sales_data = left_join(sales, spark)

sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales',
                   same_limit = FALSE)
```

## Bullet chart & Sparklines

```{r}

bullet <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  group_by(`Product`) %>%
  summarise(`Target` = sum(`Budget Sales`),
            `Actual` = sum(`Sales`)) %>%
  ungroup() 

sales_data = sales_data %>%
  left_join(bullet)

sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales') %>%
  gt_plt_bullet(column = Actual, 
                target = Target, 
                width = 28,
                palette = c("lightblue", 
                          "black")) %>%
  gt_theme_538()
```
:::

# 5 Static Information Dashboard Design

In this section, we will learn how to create a static information dashboard by using [gt](https://gt.rstudio.com/) and [gtExtras](https://jthomasmock.github.io/gtExtras/) packages.

## 5.1 Simple bullet chart

In this section, you will learn how to prepare a bullet chart report by using functions of gt and gtExtras packages.

```{r}
product %>%
  gt::gt() %>%
  gt_plt_bullet(column = current, 
              target = target, 
              width = 60,
              palette = c("lightblue", 
                          "black")) %>%
  gt_theme_538()
```

# 6 Interactive Information Dashboard Design

In this section, we will learn how to create interactive information dashboard by using `reactable` and `reactablefmtr` packages.

```{r}
report <- report %>%
  group_by(Product) %>%
  summarize(`Monthly Sales` = list(Sales))

```

::: panel-tabset

## First/Last label
```{r}
#| code-fold: true
#| code-summary: "Show the code"
reactable(
   report,
   defaultPageSize = 13,
   columns = list(
      Product = colDef(maxWidth = 200),
      `Monthly Sales` = colDef(
         cell = react_sparkline(report,
                              highlight_points = highlight_points(
                                 min = "red", max = "blue"),
                              labels = c("first", "last"),
                              )
       )
   )
)
```

## Mean Line
```{r}
#| code-fold: true
#| code-summary: "Show the code"
reactable(
   report,
   defaultPageSize = 13,
   columns = list(
      Product = colDef(maxWidth = 200),
      `Monthly Sales` = colDef(
         cell = react_sparkline(report,
                              highlight_points = highlight_points(
                                 min = "red", max = "blue"),
                              statline = "mean"
                              )
       )
   )
)
```
## Bandline

```{r}
#| code-fold: true
#| code-summary: "Show the code"
reactable(
   report,
   defaultPageSize = 13,
   columns = list(
      Product = colDef(maxWidth = 200),
      `Monthly Sales` = colDef(
         cell = react_sparkline(report,
                              highlight_points = highlight_points(
                                 min = "red", max = "blue"),
                              line_width = 1,
                              bandline = "innerquartiles",
                              bandline_color = "green"
                              )
       )
   )
)
```
## Sparkbar

```{r}
#| code-fold: true
#| code-summary: "Show the code"
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkbar(
        report,
        highlight_bars = highlight_bars(
          min = "red", max = "blue"),
        bandline = "innerquartiles",
        statline = "mean")
    )
  )
)
```


:::
::: callout-note
-   `defaultPageSize` argument is to set the page size. Default is 10.

-   `highlight_points` argument is used to show the minimum and maximum points

-   `label`argument is used to label first and last values

-   `statline` argument is used to show the mean line.
:::
