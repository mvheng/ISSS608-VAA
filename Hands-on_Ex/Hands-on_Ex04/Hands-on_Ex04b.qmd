---
title: "Hands-on Exercise 4b: Visual Statistical Analysis"
author: "Vanessa Heng"
date: "January 28, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  #freeze: true
  warning: false
  message: false
editor: visual
---

# 1 Overview

This exercise aims to

1.  Gain hands-on experience in **visual statistical analysis** using:![](/images/gghistostats.png){width="52"}[**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/)  package to create visual graphics with rich statistical information.
2.  **Visualise model diagnostics and model parameters** using performance and parameters packages.

# 2 Getting Started

## 2.1 Installing and loading the packages

For this exercise, the following R packages will be used, they are:

-   `tidyverse`, a family of R packages for data science processes,

-   `ggstatsplot` is an extension of ggplot2 package for creating graphics with details from statistical tests in the information-rich plots themselves.

```{r}
pacman::p_load(tidyverse, ggstatsplot)
pacman::p_load(readxl, performance, parameters, see)

```

## 2.2 Data import

The following datasets are used for this exercise.

-   Toyota Corolla case study will be used. The purpose of the study is to build a model to discover factors affecting the prices of used cars by taking into consideration a set of explanatory variables.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
exam_data

car_resale <- read_xls("data/ToyotaCorolla.xls", "data")
car_resale
```

# 3 Visual Statistical Analysis

## 3.1 One-sample test

`gghistostats()` produces a histogram with statistical details from a one-sample test included in the plot as a subtitle.

::: call-out-tip
## What is Bayes Factor?

-   A Bayes factor is the ratio of the likelihood of an alternate hypothesis (BF10) to the likelihood of the null hypothesis (BF01). It can be interpreted as a measure of the strength of evidence in favour of one theory among two competing theories.

-   It can be any positive number.

-   It gives us a way to evaluate the data in favour of a null hypothesis and to use external information to do so. It tells us what the weight of the evidence is in favour of a given hypothesis.

-   The [**Schwarz criterion**](https://www.statisticshowto.com/bayesian-information-criterion/) is one of the easiest ways to calculate a rough approximation of the Bayes Factor.
:::

```{r}
#| code-fold: true
#| code-summary: "Show the code"
set.seed(1234)

gghistostats(data = exam_data,
        x = ENGLISH,
        type = "bayes",
        test.value = 60,
        xlab = "English scores")
```

## 3.2 Two-sample mean test

[`ggbetweenstats()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for a two-sample mean test of Maths scores by gender as shown below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggbetweenstats(data = exam_data,
              x = GENDER, 
              y = MATHS,
              type = "np",
              messages = FALSE)
```

## 3.3 One-way ANOVA Test

[`ggbetweenstats()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for a one-way ANOVA test on English scores by race as shown below.

```{r}
#| fig-height: 5
#| code-fold: true
#| code-summary: "Show the code"
ggbetweenstats(data = exam_data,
            x = RACE, 
            y = ENGLISH,
            type = "p",
            mean.ci = TRUE, 
            pairwise.comparisons = TRUE, 
            pairwise.display = "s", 
            p.adjust.method = "fdr",
            messages = FALSE)
```

::: callout-note
For pairwise.display options:

-   “ns” → only non-significant

-   “s” → only significant

-   “all” → everything
:::

## 3.4 Significant Test of Correlation

[`ggscatterstats()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html) is used to build a visual for a significant Test of Correlation between Maths scores and English scores as shown below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggscatterstats(data = exam_data,
                x = MATHS,
                y = ENGLISH,
                marginal = FALSE)

```

## 3.5 Significant Test of Association (Dependence)

The Maths scores are binned into a 4-class variable by using [`cut()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cut) and then [`ggbarstats()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html) is used to build a visual for the significant Test of Association.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

exam_math <- exam_data %>% 
  mutate(MATHS_bins = cut(MATHS, breaks = c(0,60,75,85,100)))

ggbarstats(exam_math, 
           x = MATHS_bins, 
           y = GENDER)
```

# 4 Visualising Models

The Toyota Corolla case study will be used. The purpose of the study is to build a model to discover factors affecting the prices of used-cars by taking into consideration a set of explanatory variables.

## 4.1 Multiple Regression Model

The following is used to calibrate a multiple linear regression model by using `lm()` of Base Stats of R.

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

## 4.2 Model Diagnostic - check for multicollinearity

We use [`check_collinearity()`](https://easystats.github.io/performance/reference/check_collinearity.html) of [**performance**](https://easystats.github.io/performance/) package to check for multicollinearity.

```{r}
check_c <- check_collinearity(model)
check_c
plot(check_c)
```

## 4.3 Model Diagnostic - check normality assumption

We use [`check_normality()`](https://easystats.github.io/performance/reference/check_normality.html) of [**performance**](https://easystats.github.io/performance/) package to check normality assumption.

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)
check_n <- check_normality(model1)
plot(check_n)
```

## 4.4 Model Diagnostic - Check homogeneity of variances assumption

We use [`check_heteroscedasticity()`](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) of [**performance**](https://easystats.github.io/performance/) package.

```{r}
check_h <- check_heteroscedasticity(model1)
plot(check_h)
```

## 4.5 Model Diagnostic - Complete check

We can also perform the complete model diagnostic by using [`check_model()`](https://easystats.github.io/performance/reference/check_model.html).

```{r}
#| fig-height: 9
#| fig-width: 9
check_model(model1)
```

## 4.6 Visualising Regression Parameters

::: panel-tabset
## plot()

We use plot() of see package and parameters() of parameters package to visualise the parameters of a regression model.

```{r}
plot(parameters(model1))
```

## ggcoefstats()

We use [`ggcoefstats()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcoefstats.html) of ggstatsplot package to visualise the parameters of a regression model.

```{r}
ggcoefstats(model1, 
            output = "plot")
```
:::
