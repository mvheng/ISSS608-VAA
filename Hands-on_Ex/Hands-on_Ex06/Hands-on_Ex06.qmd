---
title: "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data"
author: "Vanessa Heng"
date: "February 16, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  #freeze: true
  warning: false
  message: false
editor: visual
---

# 1 Overview

![](images/clipboard-2248555931.png)In this exercise, we are going to create the following data visualisation by using R packages:

-   plotting a calendar heatmap by using ggplot2 functions

-   plotting a cycle plot by using ggplot2 function

-   plotting a slope graph

# 2 Getting Started

## 2.1 Installing and loading the packages

For this exercise, the following R packages will be used.

-   [**CGPfunctions**](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3) package is used to plot slope graphs using [`newggslopegraph`](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html)`()` .

```{r}
pacman::p_load(scales, viridis, lubridate, ggthemes, 
               gridExtra, readxl, knitr, data.table, 
               CGPfunctions, ggHoriPlot, tidyverse)

```

## 2.2 Data import

In this hands-on exercise, 3 files are used.

*eventlog.csv* file will be used to create calendar heat maps. This data file consists of 199,999 rows of time-series cyber attack records by country.

*arrivals_by_air.xlsx* will be used to create cycle plots. This data file consists of 240 rows of arrival information by country.

*rice.xlsx* will be used to create slope graphs. This data file consists of 550 rows of rice yield and production by year in China.

```{r}
attacks <- read_csv("data/eventlog.csv")
air <- read_excel("data/arrivals_by_air.xlsx")
rice <- read_csv("data/rice.csv")
```

## 2.3 Examine the data

Examining the imported data frame before further analysis is always a good practice.

For example, `kable()` can be used to review the structure of the imported data frame.

```{r}
kable(head(attacks))
kable(head(air))
kable(head(rice))
```

There are three columns in attacks table, namely *timestamp*, *source_country* and *tz*.

-   *timestamp* field stores date-time values in POSIXct format.

-   *source_country* field stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.

-   *tz* field stores the time zone of the source IP address.

# 3 Calendar Heatmaps

## 3.1 Single Calendar Heatmap

Let's build a single calendar heatmap.

Before we can plot the calendar heatmap, we need to prepare the data and create two customised fields.

::: panel-tabset
## Step 1

Step 1: Deriving customised fields

We write a function to derive two new fields namely *`wkday`* and *`hour`* need to be derived.

```{r}
make_hr_wkday <- function(ts, sc, tz) {   
  real_times <- ymd_hms(ts, tz = tz[1], quiet = TRUE)   
  dt <- data.table(source_country = sc, 
                   wkday = weekdays(real_times),                    
                   hour = hour(real_times))   
  return(dt)   
  }
```

## Step 2

Step 2: Deriving the attacks tibble data frame.

```{r}
wkday_levels <- c('Saturday', 'Friday', 
                  'Thursday', 'Wednesday', 
                  'Tuesday', 'Monday', 
                  'Sunday')

attacks <- attacks %>%
  group_by(tz) %>%
  do(make_hr_wkday(.$timestamp, 
                   .$source_country, 
                   .$tz)) %>% 
  ungroup() %>% 
  mutate(wkday = factor(wkday, levels = wkday_levels),
        hour  = factor(hour, levels = 0:23))

kable(head(attacks))

```

## Final Product

```{r}
grouped <- attacks %>% 
  count(wkday, hour) %>% 
  ungroup() %>%
  na.omit()

ggplot(grouped, aes(hour, wkday, fill = n)) + 
    geom_tile(color = "white", size = 0.1) + 
    theme_minimal() + 
    coord_equal() +
    scale_fill_gradient(name = "# of attacks",
                        low = "sky blue", 
                        high = "dark blue") +
    labs(x = NULL, 
         y = NULL, 
         title = "Attacks by weekday and time of day") +
    theme(axis.ticks = element_blank(),
          plot.title = element_text(hjust = 0.5),
          legend.title = element_text(size = 8),
          legend.text = element_text(size = 6) )
```
:::

::: callout-note
## Things to learn

-   A tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.

-   A new field called n is derived by using `group_by()` and `count()` functions.

-   na.omit() is used to exclude missing values.

-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size` arguments are used to specify the border colour and line size of the tiles.

-   `theme_tufte()` of `ggthemes` package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.

-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.

-   `scale_fill_gradient()` function is used to create a two-colour gradient (low-high).
:::

## 3.2 Multiple Calendar Heatmaps

Let's build multiple heatmaps for the top four countries with the highest number of attacks.

Similarly, we need to prepare the data before we can build the multiple heatmaps.

::: panel-tabset
## Step 1

Step 1: Deriving attack by country object

To identify the top 4 countries with the highest number of attacks, we need the following:

-   count the number of attacks by country,

-   calculate the percentage of attacks by country, and

-   save the results in a tibble data frame.

```{r}
attacks_by_country <- count(
  attacks, source_country) %>%
  mutate(percent = percent(n/sum(n))) %>%
  arrange(desc(n))
```

## Step 2

Step 2: Preparing the tidy data frame

Let's extract the attack records of the top 4 countries from the attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).

```{r}
top4 <- attacks_by_country$source_country[1:4]
top4_attacks <- attacks %>%
  filter(source_country %in% top4) %>%
  count(source_country, wkday, hour) %>%
  ungroup() %>%
  mutate(source_country = factor(
    source_country, levels = top4)) %>%
  na.omit()

```

## Final Product

```{r}
ggplot(top4_attacks, 
       aes(hour, 
           wkday, 
           fill = n)) + 
  geom_tile(color = "white", 
          size = 0.1) + 
  theme_minimal() + 
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
  facet_wrap(~source_country, ncol = 2) +
  labs(x = NULL, y = NULL, 
     title = "Attacks on top 4 countries by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        axis.text.x = element_text(size = 7),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6) )
```
:::

# 4 Cycle Plots

In this section, we will learn how to plot a cycle plot showing the time-series patterns and trends of visitor arrivals from Vietnam programmatically by using ggplot2 functions.

::: panel-tabset
## Step 1

Step 1: Deriving the time-related fields

Two new fields called month and year are derived from Month-Year field.

```{r}
air$month <- factor(month(air$`Month-Year`), 
                    levels=1:12, 
                    labels=month.abb, 
                    ordered=TRUE) 
air$year <- year(ymd(air$`Month-Year`))

```

## Step 2

Step 2: Extract target country

Let's extract data for the target country, i.e. Vietnam, from year 2010.

```{r}
Vietnam <- air %>% 
  select(`Vietnam`, 
         month, 
         year) %>%
  filter(year >= 2010)

```

## Step 3

Step 3: Calculate average arrivals by month

`group_by()` and `summarise()` of dplyr to compute year average arrivals by month.

```{r}
hline.data <- Vietnam %>% 
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))
```

## Final Product

```{r}
ggplot() + 
  geom_line(data=Vietnam,
            aes(x=year, 
                y=`Vietnam`, 
                group=month), 
            colour="black") +
  geom_hline(aes(yintercept=avgvalue), 
             data=hline.data, 
             linetype=6, 
             colour="red", 
             size=0.5) + 
  facet_grid(~month) +
  labs(title = "Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019", 
       x = NULL,
       y = "No. of Visitors") +
  theme_minimal() + 
  theme(axis.text.x = element_blank())
```
:::

# 5 Slope Graphs

In this section, we will learn how to plot a [slopegraph](#0) by using R.

```{r}
rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>% 
  newggslopegraph(Year, Yield, Country,
                Title = "Rice Yield of Top 11 Asian Counties",
                SubTitle = "1961-1980",
                Caption = "SMU-VAA module")

```
